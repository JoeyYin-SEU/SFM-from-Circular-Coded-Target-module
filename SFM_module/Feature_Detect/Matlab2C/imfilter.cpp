//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: imfilter.cpp
//
// MATLAB Coder version            : 5.5
// C/C++ source code generated on  : 19-Dec-2023 13:39:53
//

// Include Files
#include "imfilter.h"
#include "combineVectorElements.h"
#include "minOrMax.h"
#include "rt_nonfinite.h"
#include "sumprod.h"
#include "svd.h"
#include "coder_array.h"
#include "libmwimfilter.h"
#include "libmwippfilter.h"
#include "omp.h"
#include <cmath>

// Function Declarations
namespace coder {
static void padImage(const ::coder::array<float, 2U> &a_tmp,
                     const double pad[2], ::coder::array<float, 2U> &a);

}

// Function Definitions
//
// Arguments    : const ::coder::array<float, 2U> &a_tmp
//                const double pad[2]
//                ::coder::array<float, 2U> &a
// Return Type  : void
//
namespace coder {
static void padImage(const ::coder::array<float, 2U> &a_tmp,
                     const double pad[2], ::coder::array<float, 2U> &a)
{
  int b_i;
  int i2;
  if ((a_tmp.size(0) == 0) || (a_tmp.size(1) == 0)) {
    double sizeB_idx_0;
    double sizeB_idx_1;
    int loop_ub;
    sizeB_idx_0 = static_cast<double>(a_tmp.size(0)) + 2.0 * pad[0];
    sizeB_idx_1 = static_cast<double>(a_tmp.size(1)) + 2.0 * pad[1];
    a.set_size(static_cast<int>(sizeB_idx_0), static_cast<int>(sizeB_idx_1));
    loop_ub = static_cast<int>(sizeB_idx_0) * static_cast<int>(sizeB_idx_1);
    if (static_cast<int>(loop_ub < 3200)) {
      for (i2 = 0; i2 < loop_ub; i2++) {
        a[i2] = 0.0F;
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i2 = 0; i2 < loop_ub; i2++) {
        a[i2] = 0.0F;
      }
    }
  } else {
    int i;
    int i1;
    int loop_ub;
    a.set_size(
        static_cast<int>(static_cast<double>(a_tmp.size(0)) + 2.0 * pad[0]),
        static_cast<int>(static_cast<double>(a_tmp.size(1)) + 2.0 * pad[1]));
    i = static_cast<int>(pad[1]);
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32) private(b_i, i2)

    for (int j = 0; j < i; j++) {
      i2 = a.size(0);
      for (b_i = 0; b_i < i2; b_i++) {
        a[b_i + a.size(0) * j] = 0.0F;
      }
    }
    i = (a_tmp.size(1) + static_cast<int>(pad[1])) + 1;
    i1 = a.size(1);
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32) private(b_i, i2)

    for (int j = i; j <= i1; j++) {
      i2 = a.size(0);
      for (b_i = 0; b_i < i2; b_i++) {
        a[b_i + a.size(0) * (j - 1)] = 0.0F;
      }
    }
    i = a_tmp.size(1);
    i1 = static_cast<int>(pad[0]);
    loop_ub = static_cast<int>(pad[0]);
    if (static_cast<int>(a_tmp.size(1) * static_cast<int>(pad[0]) < 3200)) {
      for (int j{0}; j < i; j++) {
        for (b_i = 0; b_i < i1; b_i++) {
          a[b_i + a.size(0) * (j + static_cast<int>(pad[1]))] = 0.0F;
        }
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32) private(b_i)

      for (int j = 0; j < i; j++) {
        for (b_i = 0; b_i < loop_ub; b_i++) {
          a[b_i + a.size(0) * (j + static_cast<int>(pad[1]))] = 0.0F;
        }
      }
    }
    i = a_tmp.size(1);
    i1 = (static_cast<int>(pad[0]) + a_tmp.size(0)) + 1;
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32) private(b_i, i2)

    for (int j = 0; j < i; j++) {
      i2 = a.size(0);
      for (b_i = i1; b_i <= i2; b_i++) {
        a[(b_i + a.size(0) * (j + static_cast<int>(pad[1]))) - 1] = 0.0F;
      }
    }
    i = a_tmp.size(1);
    i1 = a_tmp.size(0);
    if (static_cast<int>(a_tmp.size(0) * a_tmp.size(1) < 3200)) {
      for (int j{0}; j < i; j++) {
        for (b_i = 0; b_i < i1; b_i++) {
          a[(b_i + static_cast<int>(pad[0])) +
            a.size(0) * (j + static_cast<int>(pad[1]))] =
              a_tmp[b_i + a_tmp.size(0) * j];
        }
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32) private(b_i)

      for (int j = 0; j < i; j++) {
        for (b_i = 0; b_i < i1; b_i++) {
          a[(b_i + static_cast<int>(pad[0])) +
            a.size(0) * (j + static_cast<int>(pad[1]))] =
              a_tmp[b_i + a_tmp.size(0) * j];
        }
      }
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
void b_imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const boolean_T conn[3]{true, false, true};
  array<float, 2U> a;
  double outSizeT[2];
  double startT[2];
  outSizeT[0] = varargin_1.size(0);
  startT[0] = 0.0;
  outSizeT[1] = varargin_1.size(1);
  startT[1] = 1.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    boolean_T tooBig;
    padImage(varargin_1, startT, a);
    tooBig = true;
    if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
      tooBig = false;
    }
    varargin_1.set_size(static_cast<int>(outSizeT[0]),
                        static_cast<int>(outSizeT[1]));
    if (!tooBig) {
      double kernel[3];
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      padSizeT[1] = a.size(1);
      kernel[0] = -1.0;
      kernel[1] = 0.0;
      kernel[2] = 1.0;
      startT[0] = 1.0;
      startT[1] = 3.0;
      ippfilter_real32(&a[0], &varargin_1[0], &outSizeT[0], 2.0, &padSizeT[0],
                       &kernel[0], &startT[0], true);
    } else {
      double connDimsT[2];
      double nonZeroKernel[2];
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      nonZeroKernel[0] = -1.0;
      connDimsT[0] = 1.0;
      padSizeT[1] = a.size(1);
      nonZeroKernel[1] = 1.0;
      connDimsT[1] = 3.0;
      imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                      &padSizeT[0], &nonZeroKernel[0], 2.0, &conn[0], 2.0,
                      &connDimsT[0], &startT[0], 2.0, true, true);
    }
  }
}

//
// Arguments    : const ::coder::array<float, 2U> &a_tmp
//                const double pad[2]
//                ::coder::array<float, 2U> &a
// Return Type  : void
//
void b_padImage(const ::coder::array<float, 2U> &a_tmp, const double pad[2],
                ::coder::array<float, 2U> &a)
{
  array<int, 2U> idxA;
  array<unsigned int, 2U> idxDir;
  array<unsigned int, 2U> y;
  int b_i;
  int i;
  if ((a_tmp.size(0) == 0) || (a_tmp.size(1) == 0)) {
    double sizeA[2];
    int loop_ub;
    sizeA[0] = static_cast<double>(a_tmp.size(0)) + 2.0 * pad[0];
    sizeA[1] = static_cast<double>(a_tmp.size(1)) + 2.0 * pad[1];
    a.set_size(static_cast<int>(sizeA[0]), static_cast<int>(sizeA[1]));
    loop_ub = static_cast<int>(sizeA[0]) * static_cast<int>(sizeA[1]);
    if (static_cast<int>(loop_ub < 3200)) {
      for (i = 0; i < loop_ub; i++) {
        a[i] = 0.0F;
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < loop_ub; i++) {
        a[i] = 0.0F;
      }
    }
  } else {
    double sizeA[2];
    double varargin_1_idx_0;
    double varargin_1_idx_1;
    int tile_size[2];
    int loop_ub;
    int tile_size_tmp_tmp;
    int unnamed_idx_1;
    sizeA[0] = a_tmp.size(0);
    sizeA[1] = a_tmp.size(1);
    varargin_1_idx_0 = 2.0 * pad[0] + static_cast<double>(a_tmp.size(0));
    varargin_1_idx_1 = 2.0 * pad[1] + static_cast<double>(a_tmp.size(1));
    if ((varargin_1_idx_0 < varargin_1_idx_1) ||
        (std::isnan(varargin_1_idx_0) && (!std::isnan(varargin_1_idx_1)))) {
      varargin_1_idx_0 = varargin_1_idx_1;
    }
    idxA.set_size(static_cast<int>(varargin_1_idx_0), 2);
    tile_size_tmp_tmp = a_tmp.size(0);
    y.set_size(1, tile_size_tmp_tmp);
    loop_ub = tile_size_tmp_tmp - 1;
    if (static_cast<int>(tile_size_tmp_tmp < 3200)) {
      for (i = 0; i <= loop_ub; i++) {
        y[i] = static_cast<unsigned int>(i) + 1U;
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i <= loop_ub; i++) {
        y[i] = static_cast<unsigned int>(i) + 1U;
      }
    }
    tile_size_tmp_tmp = static_cast<int>(pad[0]);
    tile_size[1] = static_cast<int>(pad[0]);
    unnamed_idx_1 = static_cast<int>(pad[0]);
    idxDir.set_size(1, (static_cast<int>(pad[0]) + y.size(1)) +
                           static_cast<int>(pad[0]));
    loop_ub = static_cast<int>(pad[0]);
    if (static_cast<int>(static_cast<int>(pad[0]) < 3200)) {
      for (i = 0; i < tile_size_tmp_tmp; i++) {
        idxDir[i] = 1U;
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < loop_ub; i++) {
        idxDir[i] = 1U;
      }
    }
    loop_ub = y.size(1);
    if (static_cast<int>(y.size(1) < 3200)) {
      for (i = 0; i < loop_ub; i++) {
        idxDir[i + tile_size[1]] = y[i];
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < loop_ub; i++) {
        idxDir[i + tile_size[1]] = y[i];
      }
    }
    if (static_cast<int>(unnamed_idx_1 < 3200)) {
      for (i = 0; i < unnamed_idx_1; i++) {
        idxDir[(i + tile_size[1]) + y.size(1)] =
            static_cast<unsigned int>(sizeA[0]);
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < unnamed_idx_1; i++) {
        idxDir[(i + tile_size[1]) + y.size(1)] =
            static_cast<unsigned int>(sizeA[0]);
      }
    }
    loop_ub = idxDir.size(1);
    if (static_cast<int>(idxDir.size(1) < 3200)) {
      for (i = 0; i < loop_ub; i++) {
        idxA[i] = static_cast<int>(idxDir[i]);
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < loop_ub; i++) {
        idxA[i] = static_cast<int>(idxDir[i]);
      }
    }
    tile_size_tmp_tmp = static_cast<int>(sizeA[1]);
    y.set_size(1, tile_size_tmp_tmp);
    loop_ub = tile_size_tmp_tmp - 1;
    if (static_cast<int>(tile_size_tmp_tmp < 3200)) {
      for (i = 0; i <= loop_ub; i++) {
        y[i] = static_cast<unsigned int>(i) + 1U;
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i <= loop_ub; i++) {
        y[i] = static_cast<unsigned int>(i) + 1U;
      }
    }
    tile_size_tmp_tmp = static_cast<int>(pad[1]);
    tile_size[1] = static_cast<int>(pad[1]);
    unnamed_idx_1 = static_cast<int>(pad[1]);
    idxDir.set_size(1, (static_cast<int>(pad[1]) + y.size(1)) +
                           static_cast<int>(pad[1]));
    loop_ub = static_cast<int>(pad[1]);
    if (static_cast<int>(static_cast<int>(pad[1]) < 3200)) {
      for (i = 0; i < tile_size_tmp_tmp; i++) {
        idxDir[i] = 1U;
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < loop_ub; i++) {
        idxDir[i] = 1U;
      }
    }
    loop_ub = y.size(1);
    if (static_cast<int>(y.size(1) < 3200)) {
      for (i = 0; i < loop_ub; i++) {
        idxDir[i + tile_size[1]] = y[i];
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < loop_ub; i++) {
        idxDir[i + tile_size[1]] = y[i];
      }
    }
    if (static_cast<int>(unnamed_idx_1 < 3200)) {
      for (i = 0; i < unnamed_idx_1; i++) {
        idxDir[(i + tile_size[1]) + y.size(1)] =
            static_cast<unsigned int>(sizeA[1]);
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < unnamed_idx_1; i++) {
        idxDir[(i + tile_size[1]) + y.size(1)] =
            static_cast<unsigned int>(sizeA[1]);
      }
    }
    loop_ub = idxDir.size(1);
    if (static_cast<int>(idxDir.size(1) < 3200)) {
      for (i = 0; i < loop_ub; i++) {
        idxA[i + idxA.size(0)] = static_cast<int>(idxDir[i]);
      }
    } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

      for (i = 0; i < loop_ub; i++) {
        idxA[i + idxA.size(0)] = static_cast<int>(idxDir[i]);
      }
    }
    sizeA[1] = static_cast<double>(a_tmp.size(1)) + 2.0 * pad[1];
    a.set_size(
        static_cast<int>(static_cast<double>(a_tmp.size(0)) + 2.0 * pad[0]),
        static_cast<int>(sizeA[1]));
    tile_size_tmp_tmp = static_cast<int>(sizeA[1]);
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32) private(b_i, i)

    for (int j = 0; j < tile_size_tmp_tmp; j++) {
      i = a.size(0);
      for (b_i = 0; b_i < i; b_i++) {
        a[b_i + a.size(0) * j] =
            a_tmp[(idxA[b_i] + a_tmp.size(0) * (idxA[j + idxA.size(0)] - 1)) -
                  1];
      }
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
void c_imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const double kernel[49]{
      0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
      0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
      0.0013419653598432805, 0.0040765308179236169, 0.012383407207635906,
      0.02411958376255428,   0.030121714902657252,  0.02411958376255428,
      0.012383407207635906,  0.0040765308179236169, 0.0079399978434782879,
      0.02411958376255428,   0.046978534350396596,  0.058669089490849466,
      0.046978534350396596,  0.02411958376255428,   0.0079399978434782879,
      0.0099158573267036573, 0.030121714902657252,  0.058669089490849466,
      0.073268826056005834,  0.058669089490849466,  0.030121714902657252,
      0.0099158573267036573, 0.0079399978434782879, 0.02411958376255428,
      0.046978534350396596,  0.058669089490849466,  0.046978534350396596,
      0.02411958376255428,   0.0079399978434782879, 0.0040765308179236169,
      0.012383407207635906,  0.02411958376255428,   0.030121714902657252,
      0.02411958376255428,   0.012383407207635906,  0.0040765308179236169,
      0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
      0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
      0.0013419653598432805};
  static const double nonZeroKernel[49]{
      0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
      0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
      0.0013419653598432805, 0.0040765308179236169, 0.012383407207635906,
      0.02411958376255428,   0.030121714902657252,  0.02411958376255428,
      0.012383407207635906,  0.0040765308179236169, 0.0079399978434782879,
      0.02411958376255428,   0.046978534350396596,  0.058669089490849466,
      0.046978534350396596,  0.02411958376255428,   0.0079399978434782879,
      0.0099158573267036573, 0.030121714902657252,  0.058669089490849466,
      0.073268826056005834,  0.058669089490849466,  0.030121714902657252,
      0.0099158573267036573, 0.0079399978434782879, 0.02411958376255428,
      0.046978534350396596,  0.058669089490849466,  0.046978534350396596,
      0.02411958376255428,   0.0079399978434782879, 0.0040765308179236169,
      0.012383407207635906,  0.02411958376255428,   0.030121714902657252,
      0.02411958376255428,   0.012383407207635906,  0.0040765308179236169,
      0.0013419653598432805, 0.0040765308179236169, 0.0079399978434782879,
      0.0099158573267036573, 0.0079399978434782879, 0.0040765308179236169,
      0.0013419653598432805};
  array<float, 2U> a;
  double outSizeT[2];
  double startT[2];
  outSizeT[0] = varargin_1.size(0);
  startT[0] = 3.0;
  outSizeT[1] = varargin_1.size(1);
  startT[1] = 3.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    boolean_T tooBig;
    padImage(varargin_1, startT, a);
    tooBig = true;
    if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
      tooBig = false;
    }
    varargin_1.set_size(static_cast<int>(outSizeT[0]),
                        static_cast<int>(outSizeT[1]));
    if (!tooBig) {
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      startT[0] = 7.0;
      padSizeT[1] = a.size(1);
      startT[1] = 7.0;
      ippfilter_real32(&a[0], &varargin_1[0], &outSizeT[0], 2.0, &padSizeT[0],
                       &kernel[0], &startT[0], false);
    } else {
      double padSizeT[2];
      boolean_T conn[49];
      padSizeT[0] = a.size(0);
      padSizeT[1] = a.size(1);
      for (int i{0}; i < 49; i++) {
        conn[i] = true;
      }
      double connDimsT[2];
      connDimsT[0] = 7.0;
      connDimsT[1] = 7.0;
      imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                      &padSizeT[0], &nonZeroKernel[0], 49.0, &conn[0], 2.0,
                      &connDimsT[0], &startT[0], 2.0, true, false);
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
void d_imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const double b_x[841]{
      4.762497578988648E-8,   1.1073138628049746E-7,  2.418595836966E-7,
      4.9626364363668783E-7,  9.5657320969368355E-7,  1.7321303136116663E-6,
      2.9464529177220853E-6,  4.70841835601366E-6,    7.0681731091607814E-6,
      9.96772173790034E-6,    1.320508583762077E-5,   1.643399484969634E-5,
      1.9213286523034621E-5,  2.1101667084725539E-5,  2.1771505901906385E-5,
      2.1101667084725539E-5,  1.9213286523034621E-5,  1.643399484969634E-5,
      1.320508583762077E-5,   9.96772173790034E-6,    7.0681731091607814E-6,
      4.70841835601366E-6,    2.9464529177220853E-6,  1.7321303136116663E-6,
      9.5657320969368355E-7,  4.9626364363668783E-7,  2.418595836966E-7,
      1.1073138628049746E-7,  4.762497578988648E-8,   1.1073138628049746E-7,
      2.5745818668121091E-7,  5.6234038010021961E-7,  1.15384754131824E-6,
      2.2240993476926882E-6,  4.02732363982478E-6,    6.8507082844306217E-6,
      1.0947400667459241E-5,  1.643399484969634E-5,   2.317564739487682E-5,
      3.0702744442407152E-5,  3.8210182822179428E-5,  4.4672229568919093E-5,
      4.9062845919963714E-5,  5.0620267831066813E-5,  4.9062845919963714E-5,
      4.4672229568919093E-5,  3.8210182822179428E-5,  3.0702744442407152E-5,
      2.317564739487682E-5,   1.643399484969634E-5,   1.0947400667459241E-5,
      6.8507082844306217E-6,  4.02732363982478E-6,    2.2240993476926882E-6,
      1.15384754131824E-6,    5.6234038010021961E-7,  2.5745818668121091E-7,
      1.1073138628049746E-7,  2.418595836966E-7,      5.6234038010021961E-7,
      1.2282643141692625E-6,  2.5202347353049072E-6,  4.8578795985648562E-6,
      8.79648355952219E-6,    1.4963322589514633E-5,  2.3911321414187913E-5,
      3.5895144875646433E-5,  5.0620267831066813E-5,  6.70609593053704E-5,
      8.3458712301617293E-5,  9.75731200453745E-5,    0.00010716310783930649,
      0.00011056483004031986, 0.00010716310783930649, 9.75731200453745E-5,
      8.3458712301617293E-5,  6.70609593053704E-5,    5.0620267831066813E-5,
      3.5895144875646433E-5,  2.3911321414187913E-5,  1.4963322589514633E-5,
      8.79648355952219E-6,    4.8578795985648562E-6,  2.5202347353049072E-6,
      1.2282643141692625E-6,  5.6234038010021961E-7,  2.418595836966E-7,
      4.9626364363668783E-7,  1.15384754131824E-6,    2.5202347353049072E-6,
      5.1711859147624051E-6,  9.96772173790034E-6,    1.8049212339316831E-5,
      3.0702744442407152E-5,  4.9062845919963714E-5,  7.3652055099876124E-5,
      0.00010386604562762829, 0.00013760015419691886, 0.00017124615872978079,
      0.00020020704300665763, 0.00021988442031918191, 0.00022686430107607769,
      0.00021988442031918191, 0.00020020704300665763, 0.00017124615872978079,
      0.00013760015419691886, 0.00010386604562762829, 7.3652055099876124E-5,
      4.9062845919963714E-5,  3.0702744442407152E-5,  1.8049212339316831E-5,
      9.96772173790034E-6,    5.1711859147624051E-6,  2.5202347353049072E-6,
      1.15384754131824E-6,    4.9626364363668783E-7,  9.5657320969368355E-7,
      2.2240993476926882E-6,  4.8578795985648562E-6,  9.96772173790034E-6,
      1.9213286523034621E-5,  3.4790767369819757E-5,  5.9181088871340979E-5,
      9.4571110739526937E-5,  0.00014196805196353105, 0.00020020704300665763,
      0.00026523123916539452, 0.00033008561034905177, 0.00038590917587419588,
      0.00042383831337106868, 0.00043729238566613893, 0.00042383831337106868,
      0.00038590917587419588, 0.00033008561034905177, 0.00026523123916539452,
      0.00020020704300665763, 0.00014196805196353105, 9.4571110739526937E-5,
      5.9181088871340979E-5,  3.4790767369819757E-5,  1.9213286523034621E-5,
      9.96772173790034E-6,    4.8578795985648562E-6,  2.2240993476926882E-6,
      9.5657320969368355E-7,  1.7321303136116663E-6,  4.02732363982478E-6,
      8.79648355952219E-6,    1.8049212339316831E-5,  3.4790767369819757E-5,
      6.2997941176267855E-5,  0.00010716310783930649, 0.00017124615872978079,
      0.00025707093182044413, 0.00036252812087580268, 0.00048027172914687926,
      0.000597707824114883,   0.00069879124259254743, 0.00076747203791663592,
      0.00079183421556039055, 0.00076747203791663592, 0.00069879124259254743,
      0.000597707824114883,   0.00048027172914687926, 0.00036252812087580268,
      0.00025707093182044413, 0.00017124615872978079, 0.00010716310783930649,
      6.2997941176267855E-5,  3.4790767369819757E-5,  1.8049212339316831E-5,
      8.79648355952219E-6,    4.02732363982478E-6,    1.7321303136116663E-6,
      2.9464529177220853E-6,  6.8507082844306217E-6,  1.4963322589514633E-5,
      3.0702744442407152E-5,  5.9181088871340979E-5,  0.00010716310783930649,
      0.00018229058707881985, 0.00029129952872078386, 0.00043729238566613893,
      0.00061668110714116378, 0.00081696973173665637, 0.0010167352585825414,
      0.00118868394567977,    0.0013055139140625664,  0.0013469553742324028,
      0.0013055139140625664,  0.00118868394567977,    0.0010167352585825414,
      0.00081696973173665637, 0.00061668110714116378, 0.00043729238566613893,
      0.00029129952872078386, 0.00018229058707881985, 0.00010716310783930649,
      5.9181088871340979E-5,  3.0702744442407152E-5,  1.4963322589514633E-5,
      6.8507082844306217E-6,  2.9464529177220853E-6,  4.70841835601366E-6,
      1.0947400667459241E-5,  2.3911321414187913E-5,  4.9062845919963714E-5,
      9.4571110739526937E-5,  0.00017124615872978079, 0.00029129952872078386,
      0.00046549532146857644, 0.00069879124259254743, 0.00098545360328209861,
      0.0013055139140625664,  0.0016247383170192816,  0.0018995115366256382,
      0.0020862052945192231,  0.0021524285593099318,  0.0020862052945192231,
      0.0018995115366256382,  0.0016247383170192816,  0.0013055139140625664,
      0.00098545360328209861, 0.00069879124259254743, 0.00046549532146857644,
      0.00029129952872078386, 0.00017124615872978079, 9.4571110739526937E-5,
      4.9062845919963714E-5,  2.3911321414187913E-5,  1.0947400667459241E-5,
      4.70841835601366E-6,    7.0681731091607814E-6,  1.643399484969634E-5,
      3.5895144875646433E-5,  7.3652055099876124E-5,  0.00014196805196353105,
      0.00025707093182044413, 0.00043729238566613893, 0.00069879124259254743,
      0.0010490099002144323,  0.0014793410721772144,  0.0019598085053819927,
      0.0024390210923189073,  0.0028515045496265278,  0.0031317650743749757,
      0.0032311779693223177,  0.0031317650743749757,  0.0028515045496265278,
      0.0024390210923189073,  0.0019598085053819927,  0.0014793410721772144,
      0.0010490099002144323,  0.00069879124259254743, 0.00043729238566613893,
      0.00025707093182044413, 0.00014196805196353105, 7.3652055099876124E-5,
      3.5895144875646433E-5,  1.643399484969634E-5,   7.0681731091607814E-6,
      9.96772173790034E-6,    2.317564739487682E-5,   5.0620267831066813E-5,
      0.00010386604562762829, 0.00020020704300665763, 0.00036252812087580268,
      0.00061668110714116378, 0.00098545360328209861, 0.0014793410721772144,
      0.0020862052945192231,  0.0027637729777585307,  0.0034395710441210686,
      0.0040212659545924428,  0.0044164966431546448,  0.0045566912958167217,
      0.0044164966431546448,  0.0040212659545924428,  0.0034395710441210686,
      0.0027637729777585307,  0.0020862052945192231,  0.0014793410721772144,
      0.00098545360328209861, 0.00061668110714116378, 0.00036252812087580268,
      0.00020020704300665763, 0.00010386604562762829, 5.0620267831066813E-5,
      2.317564739487682E-5,   9.96772173790034E-6,    1.320508583762077E-5,
      3.0702744442407152E-5,  6.70609593053704E-5,    0.00013760015419691886,
      0.00026523123916539452, 0.00048027172914687926, 0.00081696973173665637,
      0.0013055139140625664,  0.0019598085053819927,  0.0027637729777585307,
      0.0036614043175211934,  0.0045566912958167217,  0.0053273118474393517,
      0.0058509074398284712,  0.0060366351789304775,  0.0058509074398284712,
      0.0053273118474393517,  0.0045566912958167217,  0.0036614043175211934,
      0.0027637729777585307,  0.0019598085053819927,  0.0013055139140625664,
      0.00081696973173665637, 0.00048027172914687926, 0.00026523123916539452,
      0.00013760015419691886, 6.70609593053704E-5,    3.0702744442407152E-5,
      1.320508583762077E-5,   1.643399484969634E-5,   3.8210182822179428E-5,
      8.3458712301617293E-5,  0.00017124615872978079, 0.00033008561034905177,
      0.000597707824114883,   0.0010167352585825414,  0.0016247383170192816,
      0.0024390210923189073,  0.0034395710441210686,  0.0045566912958167217,
      0.0056708939425266546,  0.0066299467144788158,  0.0072815719575447758,
      0.0075127138634271586,  0.0072815719575447758,  0.0066299467144788158,
      0.0056708939425266546,  0.0045566912958167217,  0.0034395710441210686,
      0.0024390210923189073,  0.0016247383170192816,  0.0010167352585825414,
      0.000597707824114883,   0.00033008561034905177, 0.00017124615872978079,
      8.3458712301617293E-5,  3.8210182822179428E-5,  1.643399484969634E-5,
      1.9213286523034621E-5,  4.4672229568919093E-5,  9.75731200453745E-5,
      0.00020020704300665763, 0.00038590917587419588, 0.00069879124259254743,
      0.00118868394567977,    0.0018995115366256382,  0.0028515045496265278,
      0.0040212659545924428,  0.0053273118474393517,  0.0066299467144788158,
      0.0077511930010180849,  0.0085130200926761858,  0.0087832523585260544,
      0.0085130200926761858,  0.0077511930010180849,  0.0066299467144788158,
      0.0053273118474393517,  0.0040212659545924428,  0.0028515045496265278,
      0.0018995115366256382,  0.00118868394567977,    0.00069879124259254743,
      0.00038590917587419588, 0.00020020704300665763, 9.75731200453745E-5,
      4.4672229568919093E-5,  1.9213286523034621E-5,  2.1101667084725539E-5,
      4.9062845919963714E-5,  0.00010716310783930649, 0.00021988442031918191,
      0.00042383831337106868, 0.00076747203791663592, 0.0013055139140625664,
      0.0020862052945192231,  0.0031317650743749757,  0.0044164966431546448,
      0.0058509074398284712,  0.0072815719575447758,  0.0085130200926761858,
      0.0093497234669282052,  0.00964651554894283,    0.0093497234669282052,
      0.0085130200926761858,  0.0072815719575447758,  0.0058509074398284712,
      0.0044164966431546448,  0.0031317650743749757,  0.0020862052945192231,
      0.0013055139140625664,  0.00076747203791663592, 0.00042383831337106868,
      0.00021988442031918191, 0.00010716310783930649, 4.9062845919963714E-5,
      2.1101667084725539E-5,  2.1771505901906385E-5,  5.0620267831066813E-5,
      0.00011056483004031986, 0.00022686430107607769, 0.00043729238566613893,
      0.00079183421556039055, 0.0013469553742324028,  0.0021524285593099318,
      0.0032311779693223177,  0.0045566912958167217,  0.0060366351789304775,
      0.0075127138634271586,  0.0087832523585260544,  0.00964651554894283,
      0.0099527288229593527,  0.00964651554894283,    0.0087832523585260544,
      0.0075127138634271586,  0.0060366351789304775,  0.0045566912958167217,
      0.0032311779693223177,  0.0021524285593099318,  0.0013469553742324028,
      0.00079183421556039055, 0.00043729238566613893, 0.00022686430107607769,
      0.00011056483004031986, 5.0620267831066813E-5,  2.1771505901906385E-5,
      2.1101667084725539E-5,  4.9062845919963714E-5,  0.00010716310783930649,
      0.00021988442031918191, 0.00042383831337106868, 0.00076747203791663592,
      0.0013055139140625664,  0.0020862052945192231,  0.0031317650743749757,
      0.0044164966431546448,  0.0058509074398284712,  0.0072815719575447758,
      0.0085130200926761858,  0.0093497234669282052,  0.00964651554894283,
      0.0093497234669282052,  0.0085130200926761858,  0.0072815719575447758,
      0.0058509074398284712,  0.0044164966431546448,  0.0031317650743749757,
      0.0020862052945192231,  0.0013055139140625664,  0.00076747203791663592,
      0.00042383831337106868, 0.00021988442031918191, 0.00010716310783930649,
      4.9062845919963714E-5,  2.1101667084725539E-5,  1.9213286523034621E-5,
      4.4672229568919093E-5,  9.75731200453745E-5,    0.00020020704300665763,
      0.00038590917587419588, 0.00069879124259254743, 0.00118868394567977,
      0.0018995115366256382,  0.0028515045496265278,  0.0040212659545924428,
      0.0053273118474393517,  0.0066299467144788158,  0.0077511930010180849,
      0.0085130200926761858,  0.0087832523585260544,  0.0085130200926761858,
      0.0077511930010180849,  0.0066299467144788158,  0.0053273118474393517,
      0.0040212659545924428,  0.0028515045496265278,  0.0018995115366256382,
      0.00118868394567977,    0.00069879124259254743, 0.00038590917587419588,
      0.00020020704300665763, 9.75731200453745E-5,    4.4672229568919093E-5,
      1.9213286523034621E-5,  1.643399484969634E-5,   3.8210182822179428E-5,
      8.3458712301617293E-5,  0.00017124615872978079, 0.00033008561034905177,
      0.000597707824114883,   0.0010167352585825414,  0.0016247383170192816,
      0.0024390210923189073,  0.0034395710441210686,  0.0045566912958167217,
      0.0056708939425266546,  0.0066299467144788158,  0.0072815719575447758,
      0.0075127138634271586,  0.0072815719575447758,  0.0066299467144788158,
      0.0056708939425266546,  0.0045566912958167217,  0.0034395710441210686,
      0.0024390210923189073,  0.0016247383170192816,  0.0010167352585825414,
      0.000597707824114883,   0.00033008561034905177, 0.00017124615872978079,
      8.3458712301617293E-5,  3.8210182822179428E-5,  1.643399484969634E-5,
      1.320508583762077E-5,   3.0702744442407152E-5,  6.70609593053704E-5,
      0.00013760015419691886, 0.00026523123916539452, 0.00048027172914687926,
      0.00081696973173665637, 0.0013055139140625664,  0.0019598085053819927,
      0.0027637729777585307,  0.0036614043175211934,  0.0045566912958167217,
      0.0053273118474393517,  0.0058509074398284712,  0.0060366351789304775,
      0.0058509074398284712,  0.0053273118474393517,  0.0045566912958167217,
      0.0036614043175211934,  0.0027637729777585307,  0.0019598085053819927,
      0.0013055139140625664,  0.00081696973173665637, 0.00048027172914687926,
      0.00026523123916539452, 0.00013760015419691886, 6.70609593053704E-5,
      3.0702744442407152E-5,  1.320508583762077E-5,   9.96772173790034E-6,
      2.317564739487682E-5,   5.0620267831066813E-5,  0.00010386604562762829,
      0.00020020704300665763, 0.00036252812087580268, 0.00061668110714116378,
      0.00098545360328209861, 0.0014793410721772144,  0.0020862052945192231,
      0.0027637729777585307,  0.0034395710441210686,  0.0040212659545924428,
      0.0044164966431546448,  0.0045566912958167217,  0.0044164966431546448,
      0.0040212659545924428,  0.0034395710441210686,  0.0027637729777585307,
      0.0020862052945192231,  0.0014793410721772144,  0.00098545360328209861,
      0.00061668110714116378, 0.00036252812087580268, 0.00020020704300665763,
      0.00010386604562762829, 5.0620267831066813E-5,  2.317564739487682E-5,
      9.96772173790034E-6,    7.0681731091607814E-6,  1.643399484969634E-5,
      3.5895144875646433E-5,  7.3652055099876124E-5,  0.00014196805196353105,
      0.00025707093182044413, 0.00043729238566613893, 0.00069879124259254743,
      0.0010490099002144323,  0.0014793410721772144,  0.0019598085053819927,
      0.0024390210923189073,  0.0028515045496265278,  0.0031317650743749757,
      0.0032311779693223177,  0.0031317650743749757,  0.0028515045496265278,
      0.0024390210923189073,  0.0019598085053819927,  0.0014793410721772144,
      0.0010490099002144323,  0.00069879124259254743, 0.00043729238566613893,
      0.00025707093182044413, 0.00014196805196353105, 7.3652055099876124E-5,
      3.5895144875646433E-5,  1.643399484969634E-5,   7.0681731091607814E-6,
      4.70841835601366E-6,    1.0947400667459241E-5,  2.3911321414187913E-5,
      4.9062845919963714E-5,  9.4571110739526937E-5,  0.00017124615872978079,
      0.00029129952872078386, 0.00046549532146857644, 0.00069879124259254743,
      0.00098545360328209861, 0.0013055139140625664,  0.0016247383170192816,
      0.0018995115366256382,  0.0020862052945192231,  0.0021524285593099318,
      0.0020862052945192231,  0.0018995115366256382,  0.0016247383170192816,
      0.0013055139140625664,  0.00098545360328209861, 0.00069879124259254743,
      0.00046549532146857644, 0.00029129952872078386, 0.00017124615872978079,
      9.4571110739526937E-5,  4.9062845919963714E-5,  2.3911321414187913E-5,
      1.0947400667459241E-5,  4.70841835601366E-6,    2.9464529177220853E-6,
      6.8507082844306217E-6,  1.4963322589514633E-5,  3.0702744442407152E-5,
      5.9181088871340979E-5,  0.00010716310783930649, 0.00018229058707881985,
      0.00029129952872078386, 0.00043729238566613893, 0.00061668110714116378,
      0.00081696973173665637, 0.0010167352585825414,  0.00118868394567977,
      0.0013055139140625664,  0.0013469553742324028,  0.0013055139140625664,
      0.00118868394567977,    0.0010167352585825414,  0.00081696973173665637,
      0.00061668110714116378, 0.00043729238566613893, 0.00029129952872078386,
      0.00018229058707881985, 0.00010716310783930649, 5.9181088871340979E-5,
      3.0702744442407152E-5,  1.4963322589514633E-5,  6.8507082844306217E-6,
      2.9464529177220853E-6,  1.7321303136116663E-6,  4.02732363982478E-6,
      8.79648355952219E-6,    1.8049212339316831E-5,  3.4790767369819757E-5,
      6.2997941176267855E-5,  0.00010716310783930649, 0.00017124615872978079,
      0.00025707093182044413, 0.00036252812087580268, 0.00048027172914687926,
      0.000597707824114883,   0.00069879124259254743, 0.00076747203791663592,
      0.00079183421556039055, 0.00076747203791663592, 0.00069879124259254743,
      0.000597707824114883,   0.00048027172914687926, 0.00036252812087580268,
      0.00025707093182044413, 0.00017124615872978079, 0.00010716310783930649,
      6.2997941176267855E-5,  3.4790767369819757E-5,  1.8049212339316831E-5,
      8.79648355952219E-6,    4.02732363982478E-6,    1.7321303136116663E-6,
      9.5657320969368355E-7,  2.2240993476926882E-6,  4.8578795985648562E-6,
      9.96772173790034E-6,    1.9213286523034621E-5,  3.4790767369819757E-5,
      5.9181088871340979E-5,  9.4571110739526937E-5,  0.00014196805196353105,
      0.00020020704300665763, 0.00026523123916539452, 0.00033008561034905177,
      0.00038590917587419588, 0.00042383831337106868, 0.00043729238566613893,
      0.00042383831337106868, 0.00038590917587419588, 0.00033008561034905177,
      0.00026523123916539452, 0.00020020704300665763, 0.00014196805196353105,
      9.4571110739526937E-5,  5.9181088871340979E-5,  3.4790767369819757E-5,
      1.9213286523034621E-5,  9.96772173790034E-6,    4.8578795985648562E-6,
      2.2240993476926882E-6,  9.5657320969368355E-7,  4.9626364363668783E-7,
      1.15384754131824E-6,    2.5202347353049072E-6,  5.1711859147624051E-6,
      9.96772173790034E-6,    1.8049212339316831E-5,  3.0702744442407152E-5,
      4.9062845919963714E-5,  7.3652055099876124E-5,  0.00010386604562762829,
      0.00013760015419691886, 0.00017124615872978079, 0.00020020704300665763,
      0.00021988442031918191, 0.00022686430107607769, 0.00021988442031918191,
      0.00020020704300665763, 0.00017124615872978079, 0.00013760015419691886,
      0.00010386604562762829, 7.3652055099876124E-5,  4.9062845919963714E-5,
      3.0702744442407152E-5,  1.8049212339316831E-5,  9.96772173790034E-6,
      5.1711859147624051E-6,  2.5202347353049072E-6,  1.15384754131824E-6,
      4.9626364363668783E-7,  2.418595836966E-7,      5.6234038010021961E-7,
      1.2282643141692625E-6,  2.5202347353049072E-6,  4.8578795985648562E-6,
      8.79648355952219E-6,    1.4963322589514633E-5,  2.3911321414187913E-5,
      3.5895144875646433E-5,  5.0620267831066813E-5,  6.70609593053704E-5,
      8.3458712301617293E-5,  9.75731200453745E-5,    0.00010716310783930649,
      0.00011056483004031986, 0.00010716310783930649, 9.75731200453745E-5,
      8.3458712301617293E-5,  6.70609593053704E-5,    5.0620267831066813E-5,
      3.5895144875646433E-5,  2.3911321414187913E-5,  1.4963322589514633E-5,
      8.79648355952219E-6,    4.8578795985648562E-6,  2.5202347353049072E-6,
      1.2282643141692625E-6,  5.6234038010021961E-7,  2.418595836966E-7,
      1.1073138628049746E-7,  2.5745818668121091E-7,  5.6234038010021961E-7,
      1.15384754131824E-6,    2.2240993476926882E-6,  4.02732363982478E-6,
      6.8507082844306217E-6,  1.0947400667459241E-5,  1.643399484969634E-5,
      2.317564739487682E-5,   3.0702744442407152E-5,  3.8210182822179428E-5,
      4.4672229568919093E-5,  4.9062845919963714E-5,  5.0620267831066813E-5,
      4.9062845919963714E-5,  4.4672229568919093E-5,  3.8210182822179428E-5,
      3.0702744442407152E-5,  2.317564739487682E-5,   1.643399484969634E-5,
      1.0947400667459241E-5,  6.8507082844306217E-6,  4.02732363982478E-6,
      2.2240993476926882E-6,  1.15384754131824E-6,    5.6234038010021961E-7,
      2.5745818668121091E-7,  1.1073138628049746E-7,  4.762497578988648E-8,
      1.1073138628049746E-7,  2.418595836966E-7,      4.9626364363668783E-7,
      9.5657320969368355E-7,  1.7321303136116663E-6,  2.9464529177220853E-6,
      4.70841835601366E-6,    7.0681731091607814E-6,  9.96772173790034E-6,
      1.320508583762077E-5,   1.643399484969634E-5,   1.9213286523034621E-5,
      2.1101667084725539E-5,  2.1771505901906385E-5,  2.1101667084725539E-5,
      1.9213286523034621E-5,  1.643399484969634E-5,   1.320508583762077E-5,
      9.96772173790034E-6,    7.0681731091607814E-6,  4.70841835601366E-6,
      2.9464529177220853E-6,  1.7321303136116663E-6,  9.5657320969368355E-7,
      4.9626364363668783E-7,  2.418595836966E-7,      1.1073138628049746E-7,
      4.762497578988648E-8};
  static const double h[841]{
      4.762497578988648E-8,   1.1073138628049746E-7,  2.418595836966E-7,
      4.9626364363668783E-7,  9.5657320969368355E-7,  1.7321303136116663E-6,
      2.9464529177220853E-6,  4.70841835601366E-6,    7.0681731091607814E-6,
      9.96772173790034E-6,    1.320508583762077E-5,   1.643399484969634E-5,
      1.9213286523034621E-5,  2.1101667084725539E-5,  2.1771505901906385E-5,
      2.1101667084725539E-5,  1.9213286523034621E-5,  1.643399484969634E-5,
      1.320508583762077E-5,   9.96772173790034E-6,    7.0681731091607814E-6,
      4.70841835601366E-6,    2.9464529177220853E-6,  1.7321303136116663E-6,
      9.5657320969368355E-7,  4.9626364363668783E-7,  2.418595836966E-7,
      1.1073138628049746E-7,  4.762497578988648E-8,   1.1073138628049746E-7,
      2.5745818668121091E-7,  5.6234038010021961E-7,  1.15384754131824E-6,
      2.2240993476926882E-6,  4.02732363982478E-6,    6.8507082844306217E-6,
      1.0947400667459241E-5,  1.643399484969634E-5,   2.317564739487682E-5,
      3.0702744442407152E-5,  3.8210182822179428E-5,  4.4672229568919093E-5,
      4.9062845919963714E-5,  5.0620267831066813E-5,  4.9062845919963714E-5,
      4.4672229568919093E-5,  3.8210182822179428E-5,  3.0702744442407152E-5,
      2.317564739487682E-5,   1.643399484969634E-5,   1.0947400667459241E-5,
      6.8507082844306217E-6,  4.02732363982478E-6,    2.2240993476926882E-6,
      1.15384754131824E-6,    5.6234038010021961E-7,  2.5745818668121091E-7,
      1.1073138628049746E-7,  2.418595836966E-7,      5.6234038010021961E-7,
      1.2282643141692625E-6,  2.5202347353049072E-6,  4.8578795985648562E-6,
      8.79648355952219E-6,    1.4963322589514633E-5,  2.3911321414187913E-5,
      3.5895144875646433E-5,  5.0620267831066813E-5,  6.70609593053704E-5,
      8.3458712301617293E-5,  9.75731200453745E-5,    0.00010716310783930649,
      0.00011056483004031986, 0.00010716310783930649, 9.75731200453745E-5,
      8.3458712301617293E-5,  6.70609593053704E-5,    5.0620267831066813E-5,
      3.5895144875646433E-5,  2.3911321414187913E-5,  1.4963322589514633E-5,
      8.79648355952219E-6,    4.8578795985648562E-6,  2.5202347353049072E-6,
      1.2282643141692625E-6,  5.6234038010021961E-7,  2.418595836966E-7,
      4.9626364363668783E-7,  1.15384754131824E-6,    2.5202347353049072E-6,
      5.1711859147624051E-6,  9.96772173790034E-6,    1.8049212339316831E-5,
      3.0702744442407152E-5,  4.9062845919963714E-5,  7.3652055099876124E-5,
      0.00010386604562762829, 0.00013760015419691886, 0.00017124615872978079,
      0.00020020704300665763, 0.00021988442031918191, 0.00022686430107607769,
      0.00021988442031918191, 0.00020020704300665763, 0.00017124615872978079,
      0.00013760015419691886, 0.00010386604562762829, 7.3652055099876124E-5,
      4.9062845919963714E-5,  3.0702744442407152E-5,  1.8049212339316831E-5,
      9.96772173790034E-6,    5.1711859147624051E-6,  2.5202347353049072E-6,
      1.15384754131824E-6,    4.9626364363668783E-7,  9.5657320969368355E-7,
      2.2240993476926882E-6,  4.8578795985648562E-6,  9.96772173790034E-6,
      1.9213286523034621E-5,  3.4790767369819757E-5,  5.9181088871340979E-5,
      9.4571110739526937E-5,  0.00014196805196353105, 0.00020020704300665763,
      0.00026523123916539452, 0.00033008561034905177, 0.00038590917587419588,
      0.00042383831337106868, 0.00043729238566613893, 0.00042383831337106868,
      0.00038590917587419588, 0.00033008561034905177, 0.00026523123916539452,
      0.00020020704300665763, 0.00014196805196353105, 9.4571110739526937E-5,
      5.9181088871340979E-5,  3.4790767369819757E-5,  1.9213286523034621E-5,
      9.96772173790034E-6,    4.8578795985648562E-6,  2.2240993476926882E-6,
      9.5657320969368355E-7,  1.7321303136116663E-6,  4.02732363982478E-6,
      8.79648355952219E-6,    1.8049212339316831E-5,  3.4790767369819757E-5,
      6.2997941176267855E-5,  0.00010716310783930649, 0.00017124615872978079,
      0.00025707093182044413, 0.00036252812087580268, 0.00048027172914687926,
      0.000597707824114883,   0.00069879124259254743, 0.00076747203791663592,
      0.00079183421556039055, 0.00076747203791663592, 0.00069879124259254743,
      0.000597707824114883,   0.00048027172914687926, 0.00036252812087580268,
      0.00025707093182044413, 0.00017124615872978079, 0.00010716310783930649,
      6.2997941176267855E-5,  3.4790767369819757E-5,  1.8049212339316831E-5,
      8.79648355952219E-6,    4.02732363982478E-6,    1.7321303136116663E-6,
      2.9464529177220853E-6,  6.8507082844306217E-6,  1.4963322589514633E-5,
      3.0702744442407152E-5,  5.9181088871340979E-5,  0.00010716310783930649,
      0.00018229058707881985, 0.00029129952872078386, 0.00043729238566613893,
      0.00061668110714116378, 0.00081696973173665637, 0.0010167352585825414,
      0.00118868394567977,    0.0013055139140625664,  0.0013469553742324028,
      0.0013055139140625664,  0.00118868394567977,    0.0010167352585825414,
      0.00081696973173665637, 0.00061668110714116378, 0.00043729238566613893,
      0.00029129952872078386, 0.00018229058707881985, 0.00010716310783930649,
      5.9181088871340979E-5,  3.0702744442407152E-5,  1.4963322589514633E-5,
      6.8507082844306217E-6,  2.9464529177220853E-6,  4.70841835601366E-6,
      1.0947400667459241E-5,  2.3911321414187913E-5,  4.9062845919963714E-5,
      9.4571110739526937E-5,  0.00017124615872978079, 0.00029129952872078386,
      0.00046549532146857644, 0.00069879124259254743, 0.00098545360328209861,
      0.0013055139140625664,  0.0016247383170192816,  0.0018995115366256382,
      0.0020862052945192231,  0.0021524285593099318,  0.0020862052945192231,
      0.0018995115366256382,  0.0016247383170192816,  0.0013055139140625664,
      0.00098545360328209861, 0.00069879124259254743, 0.00046549532146857644,
      0.00029129952872078386, 0.00017124615872978079, 9.4571110739526937E-5,
      4.9062845919963714E-5,  2.3911321414187913E-5,  1.0947400667459241E-5,
      4.70841835601366E-6,    7.0681731091607814E-6,  1.643399484969634E-5,
      3.5895144875646433E-5,  7.3652055099876124E-5,  0.00014196805196353105,
      0.00025707093182044413, 0.00043729238566613893, 0.00069879124259254743,
      0.0010490099002144323,  0.0014793410721772144,  0.0019598085053819927,
      0.0024390210923189073,  0.0028515045496265278,  0.0031317650743749757,
      0.0032311779693223177,  0.0031317650743749757,  0.0028515045496265278,
      0.0024390210923189073,  0.0019598085053819927,  0.0014793410721772144,
      0.0010490099002144323,  0.00069879124259254743, 0.00043729238566613893,
      0.00025707093182044413, 0.00014196805196353105, 7.3652055099876124E-5,
      3.5895144875646433E-5,  1.643399484969634E-5,   7.0681731091607814E-6,
      9.96772173790034E-6,    2.317564739487682E-5,   5.0620267831066813E-5,
      0.00010386604562762829, 0.00020020704300665763, 0.00036252812087580268,
      0.00061668110714116378, 0.00098545360328209861, 0.0014793410721772144,
      0.0020862052945192231,  0.0027637729777585307,  0.0034395710441210686,
      0.0040212659545924428,  0.0044164966431546448,  0.0045566912958167217,
      0.0044164966431546448,  0.0040212659545924428,  0.0034395710441210686,
      0.0027637729777585307,  0.0020862052945192231,  0.0014793410721772144,
      0.00098545360328209861, 0.00061668110714116378, 0.00036252812087580268,
      0.00020020704300665763, 0.00010386604562762829, 5.0620267831066813E-5,
      2.317564739487682E-5,   9.96772173790034E-6,    1.320508583762077E-5,
      3.0702744442407152E-5,  6.70609593053704E-5,    0.00013760015419691886,
      0.00026523123916539452, 0.00048027172914687926, 0.00081696973173665637,
      0.0013055139140625664,  0.0019598085053819927,  0.0027637729777585307,
      0.0036614043175211934,  0.0045566912958167217,  0.0053273118474393517,
      0.0058509074398284712,  0.0060366351789304775,  0.0058509074398284712,
      0.0053273118474393517,  0.0045566912958167217,  0.0036614043175211934,
      0.0027637729777585307,  0.0019598085053819927,  0.0013055139140625664,
      0.00081696973173665637, 0.00048027172914687926, 0.00026523123916539452,
      0.00013760015419691886, 6.70609593053704E-5,    3.0702744442407152E-5,
      1.320508583762077E-5,   1.643399484969634E-5,   3.8210182822179428E-5,
      8.3458712301617293E-5,  0.00017124615872978079, 0.00033008561034905177,
      0.000597707824114883,   0.0010167352585825414,  0.0016247383170192816,
      0.0024390210923189073,  0.0034395710441210686,  0.0045566912958167217,
      0.0056708939425266546,  0.0066299467144788158,  0.0072815719575447758,
      0.0075127138634271586,  0.0072815719575447758,  0.0066299467144788158,
      0.0056708939425266546,  0.0045566912958167217,  0.0034395710441210686,
      0.0024390210923189073,  0.0016247383170192816,  0.0010167352585825414,
      0.000597707824114883,   0.00033008561034905177, 0.00017124615872978079,
      8.3458712301617293E-5,  3.8210182822179428E-5,  1.643399484969634E-5,
      1.9213286523034621E-5,  4.4672229568919093E-5,  9.75731200453745E-5,
      0.00020020704300665763, 0.00038590917587419588, 0.00069879124259254743,
      0.00118868394567977,    0.0018995115366256382,  0.0028515045496265278,
      0.0040212659545924428,  0.0053273118474393517,  0.0066299467144788158,
      0.0077511930010180849,  0.0085130200926761858,  0.0087832523585260544,
      0.0085130200926761858,  0.0077511930010180849,  0.0066299467144788158,
      0.0053273118474393517,  0.0040212659545924428,  0.0028515045496265278,
      0.0018995115366256382,  0.00118868394567977,    0.00069879124259254743,
      0.00038590917587419588, 0.00020020704300665763, 9.75731200453745E-5,
      4.4672229568919093E-5,  1.9213286523034621E-5,  2.1101667084725539E-5,
      4.9062845919963714E-5,  0.00010716310783930649, 0.00021988442031918191,
      0.00042383831337106868, 0.00076747203791663592, 0.0013055139140625664,
      0.0020862052945192231,  0.0031317650743749757,  0.0044164966431546448,
      0.0058509074398284712,  0.0072815719575447758,  0.0085130200926761858,
      0.0093497234669282052,  0.00964651554894283,    0.0093497234669282052,
      0.0085130200926761858,  0.0072815719575447758,  0.0058509074398284712,
      0.0044164966431546448,  0.0031317650743749757,  0.0020862052945192231,
      0.0013055139140625664,  0.00076747203791663592, 0.00042383831337106868,
      0.00021988442031918191, 0.00010716310783930649, 4.9062845919963714E-5,
      2.1101667084725539E-5,  2.1771505901906385E-5,  5.0620267831066813E-5,
      0.00011056483004031986, 0.00022686430107607769, 0.00043729238566613893,
      0.00079183421556039055, 0.0013469553742324028,  0.0021524285593099318,
      0.0032311779693223177,  0.0045566912958167217,  0.0060366351789304775,
      0.0075127138634271586,  0.0087832523585260544,  0.00964651554894283,
      0.0099527288229593527,  0.00964651554894283,    0.0087832523585260544,
      0.0075127138634271586,  0.0060366351789304775,  0.0045566912958167217,
      0.0032311779693223177,  0.0021524285593099318,  0.0013469553742324028,
      0.00079183421556039055, 0.00043729238566613893, 0.00022686430107607769,
      0.00011056483004031986, 5.0620267831066813E-5,  2.1771505901906385E-5,
      2.1101667084725539E-5,  4.9062845919963714E-5,  0.00010716310783930649,
      0.00021988442031918191, 0.00042383831337106868, 0.00076747203791663592,
      0.0013055139140625664,  0.0020862052945192231,  0.0031317650743749757,
      0.0044164966431546448,  0.0058509074398284712,  0.0072815719575447758,
      0.0085130200926761858,  0.0093497234669282052,  0.00964651554894283,
      0.0093497234669282052,  0.0085130200926761858,  0.0072815719575447758,
      0.0058509074398284712,  0.0044164966431546448,  0.0031317650743749757,
      0.0020862052945192231,  0.0013055139140625664,  0.00076747203791663592,
      0.00042383831337106868, 0.00021988442031918191, 0.00010716310783930649,
      4.9062845919963714E-5,  2.1101667084725539E-5,  1.9213286523034621E-5,
      4.4672229568919093E-5,  9.75731200453745E-5,    0.00020020704300665763,
      0.00038590917587419588, 0.00069879124259254743, 0.00118868394567977,
      0.0018995115366256382,  0.0028515045496265278,  0.0040212659545924428,
      0.0053273118474393517,  0.0066299467144788158,  0.0077511930010180849,
      0.0085130200926761858,  0.0087832523585260544,  0.0085130200926761858,
      0.0077511930010180849,  0.0066299467144788158,  0.0053273118474393517,
      0.0040212659545924428,  0.0028515045496265278,  0.0018995115366256382,
      0.00118868394567977,    0.00069879124259254743, 0.00038590917587419588,
      0.00020020704300665763, 9.75731200453745E-5,    4.4672229568919093E-5,
      1.9213286523034621E-5,  1.643399484969634E-5,   3.8210182822179428E-5,
      8.3458712301617293E-5,  0.00017124615872978079, 0.00033008561034905177,
      0.000597707824114883,   0.0010167352585825414,  0.0016247383170192816,
      0.0024390210923189073,  0.0034395710441210686,  0.0045566912958167217,
      0.0056708939425266546,  0.0066299467144788158,  0.0072815719575447758,
      0.0075127138634271586,  0.0072815719575447758,  0.0066299467144788158,
      0.0056708939425266546,  0.0045566912958167217,  0.0034395710441210686,
      0.0024390210923189073,  0.0016247383170192816,  0.0010167352585825414,
      0.000597707824114883,   0.00033008561034905177, 0.00017124615872978079,
      8.3458712301617293E-5,  3.8210182822179428E-5,  1.643399484969634E-5,
      1.320508583762077E-5,   3.0702744442407152E-5,  6.70609593053704E-5,
      0.00013760015419691886, 0.00026523123916539452, 0.00048027172914687926,
      0.00081696973173665637, 0.0013055139140625664,  0.0019598085053819927,
      0.0027637729777585307,  0.0036614043175211934,  0.0045566912958167217,
      0.0053273118474393517,  0.0058509074398284712,  0.0060366351789304775,
      0.0058509074398284712,  0.0053273118474393517,  0.0045566912958167217,
      0.0036614043175211934,  0.0027637729777585307,  0.0019598085053819927,
      0.0013055139140625664,  0.00081696973173665637, 0.00048027172914687926,
      0.00026523123916539452, 0.00013760015419691886, 6.70609593053704E-5,
      3.0702744442407152E-5,  1.320508583762077E-5,   9.96772173790034E-6,
      2.317564739487682E-5,   5.0620267831066813E-5,  0.00010386604562762829,
      0.00020020704300665763, 0.00036252812087580268, 0.00061668110714116378,
      0.00098545360328209861, 0.0014793410721772144,  0.0020862052945192231,
      0.0027637729777585307,  0.0034395710441210686,  0.0040212659545924428,
      0.0044164966431546448,  0.0045566912958167217,  0.0044164966431546448,
      0.0040212659545924428,  0.0034395710441210686,  0.0027637729777585307,
      0.0020862052945192231,  0.0014793410721772144,  0.00098545360328209861,
      0.00061668110714116378, 0.00036252812087580268, 0.00020020704300665763,
      0.00010386604562762829, 5.0620267831066813E-5,  2.317564739487682E-5,
      9.96772173790034E-6,    7.0681731091607814E-6,  1.643399484969634E-5,
      3.5895144875646433E-5,  7.3652055099876124E-5,  0.00014196805196353105,
      0.00025707093182044413, 0.00043729238566613893, 0.00069879124259254743,
      0.0010490099002144323,  0.0014793410721772144,  0.0019598085053819927,
      0.0024390210923189073,  0.0028515045496265278,  0.0031317650743749757,
      0.0032311779693223177,  0.0031317650743749757,  0.0028515045496265278,
      0.0024390210923189073,  0.0019598085053819927,  0.0014793410721772144,
      0.0010490099002144323,  0.00069879124259254743, 0.00043729238566613893,
      0.00025707093182044413, 0.00014196805196353105, 7.3652055099876124E-5,
      3.5895144875646433E-5,  1.643399484969634E-5,   7.0681731091607814E-6,
      4.70841835601366E-6,    1.0947400667459241E-5,  2.3911321414187913E-5,
      4.9062845919963714E-5,  9.4571110739526937E-5,  0.00017124615872978079,
      0.00029129952872078386, 0.00046549532146857644, 0.00069879124259254743,
      0.00098545360328209861, 0.0013055139140625664,  0.0016247383170192816,
      0.0018995115366256382,  0.0020862052945192231,  0.0021524285593099318,
      0.0020862052945192231,  0.0018995115366256382,  0.0016247383170192816,
      0.0013055139140625664,  0.00098545360328209861, 0.00069879124259254743,
      0.00046549532146857644, 0.00029129952872078386, 0.00017124615872978079,
      9.4571110739526937E-5,  4.9062845919963714E-5,  2.3911321414187913E-5,
      1.0947400667459241E-5,  4.70841835601366E-6,    2.9464529177220853E-6,
      6.8507082844306217E-6,  1.4963322589514633E-5,  3.0702744442407152E-5,
      5.9181088871340979E-5,  0.00010716310783930649, 0.00018229058707881985,
      0.00029129952872078386, 0.00043729238566613893, 0.00061668110714116378,
      0.00081696973173665637, 0.0010167352585825414,  0.00118868394567977,
      0.0013055139140625664,  0.0013469553742324028,  0.0013055139140625664,
      0.00118868394567977,    0.0010167352585825414,  0.00081696973173665637,
      0.00061668110714116378, 0.00043729238566613893, 0.00029129952872078386,
      0.00018229058707881985, 0.00010716310783930649, 5.9181088871340979E-5,
      3.0702744442407152E-5,  1.4963322589514633E-5,  6.8507082844306217E-6,
      2.9464529177220853E-6,  1.7321303136116663E-6,  4.02732363982478E-6,
      8.79648355952219E-6,    1.8049212339316831E-5,  3.4790767369819757E-5,
      6.2997941176267855E-5,  0.00010716310783930649, 0.00017124615872978079,
      0.00025707093182044413, 0.00036252812087580268, 0.00048027172914687926,
      0.000597707824114883,   0.00069879124259254743, 0.00076747203791663592,
      0.00079183421556039055, 0.00076747203791663592, 0.00069879124259254743,
      0.000597707824114883,   0.00048027172914687926, 0.00036252812087580268,
      0.00025707093182044413, 0.00017124615872978079, 0.00010716310783930649,
      6.2997941176267855E-5,  3.4790767369819757E-5,  1.8049212339316831E-5,
      8.79648355952219E-6,    4.02732363982478E-6,    1.7321303136116663E-6,
      9.5657320969368355E-7,  2.2240993476926882E-6,  4.8578795985648562E-6,
      9.96772173790034E-6,    1.9213286523034621E-5,  3.4790767369819757E-5,
      5.9181088871340979E-5,  9.4571110739526937E-5,  0.00014196805196353105,
      0.00020020704300665763, 0.00026523123916539452, 0.00033008561034905177,
      0.00038590917587419588, 0.00042383831337106868, 0.00043729238566613893,
      0.00042383831337106868, 0.00038590917587419588, 0.00033008561034905177,
      0.00026523123916539452, 0.00020020704300665763, 0.00014196805196353105,
      9.4571110739526937E-5,  5.9181088871340979E-5,  3.4790767369819757E-5,
      1.9213286523034621E-5,  9.96772173790034E-6,    4.8578795985648562E-6,
      2.2240993476926882E-6,  9.5657320969368355E-7,  4.9626364363668783E-7,
      1.15384754131824E-6,    2.5202347353049072E-6,  5.1711859147624051E-6,
      9.96772173790034E-6,    1.8049212339316831E-5,  3.0702744442407152E-5,
      4.9062845919963714E-5,  7.3652055099876124E-5,  0.00010386604562762829,
      0.00013760015419691886, 0.00017124615872978079, 0.00020020704300665763,
      0.00021988442031918191, 0.00022686430107607769, 0.00021988442031918191,
      0.00020020704300665763, 0.00017124615872978079, 0.00013760015419691886,
      0.00010386604562762829, 7.3652055099876124E-5,  4.9062845919963714E-5,
      3.0702744442407152E-5,  1.8049212339316831E-5,  9.96772173790034E-6,
      5.1711859147624051E-6,  2.5202347353049072E-6,  1.15384754131824E-6,
      4.9626364363668783E-7,  2.418595836966E-7,      5.6234038010021961E-7,
      1.2282643141692625E-6,  2.5202347353049072E-6,  4.8578795985648562E-6,
      8.79648355952219E-6,    1.4963322589514633E-5,  2.3911321414187913E-5,
      3.5895144875646433E-5,  5.0620267831066813E-5,  6.70609593053704E-5,
      8.3458712301617293E-5,  9.75731200453745E-5,    0.00010716310783930649,
      0.00011056483004031986, 0.00010716310783930649, 9.75731200453745E-5,
      8.3458712301617293E-5,  6.70609593053704E-5,    5.0620267831066813E-5,
      3.5895144875646433E-5,  2.3911321414187913E-5,  1.4963322589514633E-5,
      8.79648355952219E-6,    4.8578795985648562E-6,  2.5202347353049072E-6,
      1.2282643141692625E-6,  5.6234038010021961E-7,  2.418595836966E-7,
      1.1073138628049746E-7,  2.5745818668121091E-7,  5.6234038010021961E-7,
      1.15384754131824E-6,    2.2240993476926882E-6,  4.02732363982478E-6,
      6.8507082844306217E-6,  1.0947400667459241E-5,  1.643399484969634E-5,
      2.317564739487682E-5,   3.0702744442407152E-5,  3.8210182822179428E-5,
      4.4672229568919093E-5,  4.9062845919963714E-5,  5.0620267831066813E-5,
      4.9062845919963714E-5,  4.4672229568919093E-5,  3.8210182822179428E-5,
      3.0702744442407152E-5,  2.317564739487682E-5,   1.643399484969634E-5,
      1.0947400667459241E-5,  6.8507082844306217E-6,  4.02732363982478E-6,
      2.2240993476926882E-6,  1.15384754131824E-6,    5.6234038010021961E-7,
      2.5745818668121091E-7,  1.1073138628049746E-7,  4.762497578988648E-8,
      1.1073138628049746E-7,  2.418595836966E-7,      4.9626364363668783E-7,
      9.5657320969368355E-7,  1.7321303136116663E-6,  2.9464529177220853E-6,
      4.70841835601366E-6,    7.0681731091607814E-6,  9.96772173790034E-6,
      1.320508583762077E-5,   1.643399484969634E-5,   1.9213286523034621E-5,
      2.1101667084725539E-5,  2.1771505901906385E-5,  2.1101667084725539E-5,
      1.9213286523034621E-5,  1.643399484969634E-5,   1.320508583762077E-5,
      9.96772173790034E-6,    7.0681731091607814E-6,  4.70841835601366E-6,
      2.9464529177220853E-6,  1.7321303136116663E-6,  9.5657320969368355E-7,
      4.9626364363668783E-7,  2.418595836966E-7,      1.1073138628049746E-7,
      4.762497578988648E-8};
  array<double, 2U> b;
  array<double, 2U> b_a;
  array<float, 2U> a;
  double outSizeT[2];
  double startT[2];
  int i1;
  int loop_ub;
  signed char b_tmp_data[29];
  signed char tmp_data[29];
  outSizeT[0] = varargin_1.size(0);
  startT[0] = 14.0;
  outSizeT[1] = varargin_1.size(1);
  startT[1] = 14.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    double a__1[841];
    double a__2[841];
    double s[841];
    double b_s[29];
    double tol;
    int i;
    int idx;
    boolean_T x[29];
    svd(h, a__1, s, a__2);
    for (i = 0; i < 29; i++) {
      b_s[i] = s[i + 29 * i];
    }
    if (!std::isnan(b_s[0])) {
      idx = 1;
    } else {
      boolean_T exitg1;
      idx = 0;
      i = 2;
      exitg1 = false;
      while ((!exitg1) && (i <= 29)) {
        if (!std::isnan(b_s[i - 1])) {
          idx = i;
          exitg1 = true;
        } else {
          i++;
        }
      }
    }
    if (idx == 0) {
      tol = b_s[0];
    } else {
      tol = b_s[idx - 1];
      idx++;
      for (i = idx; i < 30; i++) {
        double d;
        d = b_s[i - 1];
        if (tol < d) {
          tol = d;
        }
      }
    }
    tol = 29.0 * tol * 2.2204460492503131E-16;
    for (i = 0; i < 29; i++) {
      x[i] = (b_s[i] > tol);
    }
    idx = x[0];
    for (i = 0; i < 28; i++) {
      idx += x[i + 1];
    }
    if (idx == 1) {
      double hcol[29];
      double nonzero_h_data[29];
      double connDimsT[2];
      double out_size_row[2];
      double padSizeT[2];
      int trueCount;
      boolean_T tooBig;
      padImage(varargin_1, startT, a);
      svd(h, a__1, s, a__2);
      for (i = 0; i < 29; i++) {
        b_s[i] = s[i + 29 * i];
      }
      tol = std::sqrt(b_s[0]);
      for (idx = 0; idx < 29; idx++) {
        hcol[idx] = a__1[idx] * tol;
        b_s[idx] = a__2[idx] * tol;
      }
      b_a.set_size(a.size(0), a.size(1));
      idx = a.size(0) * a.size(1);
      if (static_cast<int>(idx < 3200)) {
        for (int b_i{0}; b_i < idx; b_i++) {
          b_a[b_i] = a[b_i];
        }
      } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

        for (int b_i = 0; b_i < idx; b_i++) {
          b_a[b_i] = a[b_i];
        }
      }
      out_size_row[0] = b_a.size(0);
      out_size_row[1] = varargin_1.size(1);
      trueCount = 0;
      idx = 0;
      for (i = 0; i < 29; i++) {
        if (b_s[i] != 0.0) {
          trueCount++;
          tmp_data[idx] = static_cast<signed char>(i + 1);
          idx++;
        }
      }
      for (idx = 0; idx < trueCount; idx++) {
        nonzero_h_data[idx] = b_s[tmp_data[idx] - 1];
      }
      for (i = 0; i < 29; i++) {
        x[i] = (b_s[i] != 0.0);
      }
      tooBig = true;
      if ((b_a.size(0) <= 65500) || (!(out_size_row[1] > 65500.0))) {
        tooBig = false;
      }
      if ((static_cast<double>(trueCount) / 29.0 > 0.05) && (!tooBig)) {
        tooBig = true;
      } else {
        tooBig = false;
      }
      b.set_size(b_a.size(0), static_cast<int>(out_size_row[1]));
      if (tooBig) {
        padSizeT[0] = b_a.size(0);
        startT[0] = 1.0;
        padSizeT[1] = b_a.size(1);
        startT[1] = 29.0;
        ippfilter_real64(&b_a[0], &b[0], &out_size_row[0], 2.0, &padSizeT[0],
                         &b_s[0], &startT[0], true);
      } else {
        padSizeT[0] = b_a.size(0);
        connDimsT[0] = 1.0;
        startT[0] = 0.0;
        padSizeT[1] = b_a.size(1);
        connDimsT[1] = 29.0;
        startT[1] = 14.0;
        imfilter_real64(&b_a[0], &b[0], 2.0, &out_size_row[0], 2.0,
                        &padSizeT[0], &nonzero_h_data[0],
                        static_cast<double>(trueCount), &x[0], 2.0,
                        &connDimsT[0], &startT[0], 2.0, true, true);
      }
      trueCount = 0;
      idx = 0;
      for (i = 0; i < 29; i++) {
        if (hcol[i] != 0.0) {
          trueCount++;
          b_tmp_data[idx] = static_cast<signed char>(i + 1);
          idx++;
        }
      }
      for (idx = 0; idx < trueCount; idx++) {
        nonzero_h_data[idx] = hcol[b_tmp_data[idx] - 1];
      }
      for (i = 0; i < 29; i++) {
        x[i] = (hcol[i] != 0.0);
      }
      tooBig = true;
      if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
        tooBig = false;
      }
      if ((static_cast<double>(trueCount) / 29.0 > 0.05) && (!tooBig)) {
        tooBig = true;
      } else {
        tooBig = false;
      }
      b_a.set_size(b.size(0), b.size(1));
      idx = b.size(0) * b.size(1);
      if (static_cast<int>(idx < 3200)) {
        for (int b_i{0}; b_i < idx; b_i++) {
          b_a[b_i] = b[b_i];
        }
      } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

        for (int b_i = 0; b_i < idx; b_i++) {
          b_a[b_i] = b[b_i];
        }
      }
      b.set_size(static_cast<int>(outSizeT[0]), static_cast<int>(outSizeT[1]));
      if (tooBig) {
        padSizeT[0] = b_a.size(0);
        startT[0] = 29.0;
        padSizeT[1] = b_a.size(1);
        startT[1] = 1.0;
        ippfilter_real64(&b_a[0], &b[0], &outSizeT[0], 2.0, &padSizeT[0],
                         &hcol[0], &startT[0], true);
      } else {
        padSizeT[0] = b_a.size(0);
        connDimsT[0] = 29.0;
        startT[0] = 14.0;
        padSizeT[1] = b_a.size(1);
        connDimsT[1] = 1.0;
        startT[1] = 0.0;
        imfilter_real64(&b_a[0], &b[0], 2.0, &outSizeT[0], 2.0, &padSizeT[0],
                        &nonzero_h_data[0], static_cast<double>(trueCount),
                        &x[0], 2.0, &connDimsT[0], &startT[0], 2.0, true, true);
      }
      varargin_1.set_size(b.size(0), b.size(1));
      idx = b.size(1);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, loop_ub)

      for (int b_i = 0; b_i < idx; b_i++) {
        loop_ub = b.size(0);
        for (i1 = 0; i1 < loop_ub; i1++) {
          varargin_1[i1 + varargin_1.size(0) * b_i] =
              static_cast<float>(b[i1 + b.size(0) * b_i]);
        }
      }
    } else {
      boolean_T tooBig;
      padImage(varargin_1, startT, a);
      tooBig = true;
      if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
        tooBig = false;
      }
      varargin_1.set_size(static_cast<int>(outSizeT[0]),
                          static_cast<int>(outSizeT[1]));
      if (!tooBig) {
        double padSizeT[2];
        padSizeT[0] = a.size(0);
        startT[0] = 29.0;
        padSizeT[1] = a.size(1);
        startT[1] = 29.0;
        ippfilter_real32(&a[0], &varargin_1[0], &outSizeT[0], 2.0, &padSizeT[0],
                         &h[0], &startT[0], true);
      } else {
        double padSizeT[2];
        boolean_T conn[841];
        padSizeT[0] = a.size(0);
        padSizeT[1] = a.size(1);
        for (idx = 0; idx < 841; idx++) {
          conn[idx] = true;
        }
        double connDimsT[2];
        connDimsT[0] = 29.0;
        connDimsT[1] = 29.0;
        imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                        &padSizeT[0], &b_x[0], 841.0, &conn[0], 2.0,
                        &connDimsT[0], &startT[0], 2.0, true, true);
      }
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
//                const double varargin_2_data[]
//                const int varargin_2_size[2]
// Return Type  : void
//
void imfilter(::coder::array<float, 2U> &varargin_1,
              const double varargin_2_data[], const int varargin_2_size[2])
{
  array<float, 2U> a;
  double nonzero_h_data[225];
  double outSizeT[2];
  double startT[2];
  int i1;
  int loop_ub;
  unsigned char b_tmp_data[225];
  outSizeT[0] = varargin_1.size(0);
  startT[0] = static_cast<double>(varargin_2_size[0]) -
              std::floor((static_cast<double>(varargin_2_size[0]) + 1.0) / 2.0);
  outSizeT[1] = varargin_1.size(1);
  startT[1] = static_cast<double>(varargin_2_size[1]) -
              std::floor((static_cast<double>(varargin_2_size[1]) + 1.0) / 2.0);
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    if ((varargin_2_size[0] == 0) || (varargin_2_size[1] == 0)) {
      int b_startT[2];
      int end;
      int partialTrueCount;
      startT[0] = varargin_1.size(0);
      startT[1] = varargin_1.size(1);
      end = static_cast<int>(startT[0]);
      b_startT[0] = end;
      partialTrueCount = static_cast<int>(startT[1]);
      varargin_1.set_size(end, partialTrueCount);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, loop_ub)

      for (int b_i = 0; b_i < partialTrueCount; b_i++) {
        loop_ub = b_startT[0];
        for (i1 = 0; i1 < loop_ub; i1++) {
          varargin_1[i1 + varargin_1.size(0) * b_i] = 0.0F;
        }
      }
    } else {
      int end;
      int partialTrueCount;
      int trueCount;
      boolean_T tmp_data[225];
      boolean_T tooBig;
      padImage(varargin_1, startT, a);
      if ((varargin_2_size[0] == 1) || (varargin_2_size[1] == 1)) {
        end = varargin_2_size[0] * varargin_2_size[1];
        for (partialTrueCount = 0; partialTrueCount < end; partialTrueCount++) {
          tmp_data[partialTrueCount] =
              (varargin_2_data[partialTrueCount] != 0.0);
        }
        end--;
        trueCount = 0;
        partialTrueCount = 0;
        for (int i{0}; i <= end; i++) {
          if (tmp_data[i]) {
            trueCount++;
            nonzero_h_data[partialTrueCount] = varargin_2_data[i];
            partialTrueCount++;
          }
        }
      } else {
        end = varargin_2_size[0] * varargin_2_size[1] - 1;
        trueCount = 0;
        partialTrueCount = 0;
        for (int i{0}; i <= end; i++) {
          if (varargin_2_data[i] != 0.0) {
            trueCount++;
            b_tmp_data[partialTrueCount] = static_cast<unsigned char>(i + 1);
            partialTrueCount++;
          }
        }
        for (partialTrueCount = 0; partialTrueCount < trueCount;
             partialTrueCount++) {
          nonzero_h_data[partialTrueCount] =
              varargin_2_data[b_tmp_data[partialTrueCount] - 1];
        }
      }
      end = varargin_2_size[0] * varargin_2_size[1];
      for (partialTrueCount = 0; partialTrueCount < end; partialTrueCount++) {
        tmp_data[partialTrueCount] = (varargin_2_data[partialTrueCount] != 0.0);
      }
      tooBig = true;
      if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
        tooBig = false;
      }
      if ((static_cast<double>(trueCount) / static_cast<double>(end) > 0.05) &&
          (!tooBig)) {
        tooBig = true;
      } else {
        tooBig = false;
      }
      varargin_1.set_size(static_cast<int>(outSizeT[0]),
                          static_cast<int>(outSizeT[1]));
      if (tooBig) {
        double padSizeT[2];
        padSizeT[0] = a.size(0);
        startT[0] = varargin_2_size[0];
        padSizeT[1] = a.size(1);
        startT[1] = varargin_2_size[1];
        ippfilter_real32(&a[0], &varargin_1[0], &outSizeT[0], 2.0, &padSizeT[0],
                         &varargin_2_data[0], &startT[0], true);
      } else {
        double connDimsT[2];
        double padSizeT[2];
        padSizeT[0] = a.size(0);
        connDimsT[0] = varargin_2_size[0];
        padSizeT[1] = a.size(1);
        connDimsT[1] = varargin_2_size[1];
        imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                        &padSizeT[0], &nonzero_h_data[0],
                        static_cast<double>(trueCount), &tmp_data[0], 2.0,
                        &connDimsT[0], &startT[0], 2.0, true, true);
      }
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
//                const double varargin_2[25]
// Return Type  : void
//
void imfilter(::coder::array<float, 2U> &varargin_1,
              const double varargin_2[25])
{
  array<float, 2U> a;
  double outSizeT[2];
  double startT[2];
  signed char tmp_data[25];
  outSizeT[0] = varargin_1.size(0);
  startT[0] = 2.0;
  outSizeT[1] = varargin_1.size(1);
  startT[1] = 2.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    double nonzero_h_data[25];
    int partialTrueCount;
    int trueCount;
    boolean_T connb[25];
    boolean_T tooBig;
    padImage(varargin_1, startT, a);
    trueCount = 0;
    partialTrueCount = 0;
    for (int i{0}; i < 25; i++) {
      if (varargin_2[i] != 0.0) {
        trueCount++;
        tmp_data[partialTrueCount] = static_cast<signed char>(i + 1);
        partialTrueCount++;
      }
    }
    for (partialTrueCount = 0; partialTrueCount < trueCount;
         partialTrueCount++) {
      nonzero_h_data[partialTrueCount] =
          varargin_2[tmp_data[partialTrueCount] - 1];
    }
    for (partialTrueCount = 0; partialTrueCount < 25; partialTrueCount++) {
      connb[partialTrueCount] = (varargin_2[partialTrueCount] != 0.0);
    }
    tooBig = true;
    if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
      tooBig = false;
    }
    if ((static_cast<double>(trueCount) / 25.0 > 0.05) && (!tooBig)) {
      tooBig = true;
    } else {
      tooBig = false;
    }
    varargin_1.set_size(static_cast<int>(outSizeT[0]),
                        static_cast<int>(outSizeT[1]));
    if (tooBig) {
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      startT[0] = 5.0;
      padSizeT[1] = a.size(1);
      startT[1] = 5.0;
      ippfilter_real32(&a[0], &varargin_1[0], &outSizeT[0], 2.0, &padSizeT[0],
                       &varargin_2[0], &startT[0], true);
    } else {
      double connDimsT[2];
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      connDimsT[0] = 5.0;
      padSizeT[1] = a.size(1);
      connDimsT[1] = 5.0;
      imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                      &padSizeT[0], &nonzero_h_data[0],
                      static_cast<double>(trueCount), &connb[0], 2.0,
                      &connDimsT[0], &startT[0], 2.0, true, true);
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
// Return Type  : void
//
void imfilter(::coder::array<float, 2U> &varargin_1)
{
  static const boolean_T conn[3]{true, false, true};
  array<float, 2U> a;
  double outSizeT[2];
  double startT[2];
  outSizeT[0] = varargin_1.size(0);
  startT[0] = 1.0;
  outSizeT[1] = varargin_1.size(1);
  startT[1] = 0.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    boolean_T tooBig;
    padImage(varargin_1, startT, a);
    tooBig = true;
    if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
      tooBig = false;
    }
    varargin_1.set_size(static_cast<int>(outSizeT[0]),
                        static_cast<int>(outSizeT[1]));
    if (!tooBig) {
      double kernel[3];
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      padSizeT[1] = a.size(1);
      kernel[0] = -1.0;
      kernel[1] = 0.0;
      kernel[2] = 1.0;
      startT[0] = 3.0;
      startT[1] = 1.0;
      ippfilter_real32(&a[0], &varargin_1[0], &outSizeT[0], 2.0, &padSizeT[0],
                       &kernel[0], &startT[0], true);
    } else {
      double connDimsT[2];
      double nonZeroKernel[2];
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      nonZeroKernel[0] = -1.0;
      connDimsT[0] = 3.0;
      padSizeT[1] = a.size(1);
      nonZeroKernel[1] = 1.0;
      connDimsT[1] = 1.0;
      imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                      &padSizeT[0], &nonZeroKernel[0], 2.0, &conn[0], 2.0,
                      &connDimsT[0], &startT[0], 2.0, true, true);
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
//                const ::coder::array<double, 2U> &varargin_2
// Return Type  : void
//
void imfilter(::coder::array<float, 2U> &varargin_1,
              const ::coder::array<double, 2U> &varargin_2)
{
  array<double, 2U> b;
  array<double, 2U> hrow;
  array<double, 2U> s;
  array<double, 1U> nonzero_h;
  array<float, 2U> a;
  array<int, 2U> r2;
  array<int, 1U> r1;
  array<boolean_T, 2U> b_s;
  array<boolean_T, 2U> c_x;
  array<boolean_T, 1U> b_x;
  array<boolean_T, 1U> r;
  double outSizeT[2];
  double startT[2];
  double a__1;
  int b_loop_ub;
  int i1;
  outSizeT[0] = varargin_1.size(0);
  startT[0] = 0.0;
  outSizeT[1] = varargin_1.size(1);
  startT[1] = static_cast<double>(varargin_2.size(1)) -
              std::floor((static_cast<double>(varargin_2.size(1)) + 1.0) / 2.0);
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    if (varargin_2.size(1) == 0) {
      int b_startT[2];
      int loop_ub;
      int nv;
      startT[0] = varargin_1.size(0);
      startT[1] = varargin_1.size(1);
      nv = static_cast<int>(startT[0]);
      b_startT[0] = nv;
      loop_ub = static_cast<int>(startT[1]);
      varargin_1.set_size(nv, loop_ub);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, b_loop_ub)

      for (int i = 0; i < loop_ub; i++) {
        b_loop_ub = b_startT[0];
        for (i1 = 0; i1 < b_loop_ub; i1++) {
          varargin_1[i1 + varargin_1.size(0) * i] = 0.0F;
        }
      }
    } else {
      int loop_ub;
      int nv;
      boolean_T tooBig;
      if (varargin_2.size(1) >= 289) {
        boolean_T x[2];
        boolean_T exitg1;
        x[0] = false;
        x[1] = true;
        tooBig = true;
        nv = 0;
        exitg1 = false;
        while ((!exitg1) && (nv <= 1)) {
          if (!x[nv]) {
            tooBig = false;
            exitg1 = true;
          } else {
            nv++;
          }
        }
        if (tooBig) {
          b_x.set_size(varargin_2.size(1));
          loop_ub = varargin_2.size(1);
          if (static_cast<int>(varargin_2.size(1) < 3200)) {
            for (int i{0}; i < loop_ub; i++) {
              b_x[i] = std::isinf(varargin_2[i]);
            }
          } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

            for (int i = 0; i < loop_ub; i++) {
              b_x[i] = std::isinf(varargin_2[i]);
            }
          }
          r.set_size(varargin_2.size(1));
          loop_ub = varargin_2.size(1);
          if (static_cast<int>(varargin_2.size(1) < 3200)) {
            for (int i{0}; i < loop_ub; i++) {
              r[i] = std::isnan(varargin_2[i]);
            }
          } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

            for (int i = 0; i < loop_ub; i++) {
              r[i] = std::isnan(varargin_2[i]);
            }
          }
          loop_ub = b_x.size(0);
          if (static_cast<int>(b_x.size(0) < 3200)) {
            for (int i{0}; i < loop_ub; i++) {
              b_x[i] = ((!b_x[i]) && (!r[i]));
            }
          } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

            for (int i = 0; i < loop_ub; i++) {
              b_x[i] = ((!b_x[i]) && (!r[i]));
            }
          }
          tooBig = true;
          nv = 1;
          exitg1 = false;
          while ((!exitg1) && (nv <= b_x.size(0))) {
            if (!b_x[nv - 1]) {
              tooBig = false;
              exitg1 = true;
            } else {
              nv++;
            }
          }
          if (tooBig) {
            svd(varargin_2, &a__1, hrow, s);
            nv = hrow.size(1);
            s.set_size(hrow.size(1), hrow.size(1));
            loop_ub = hrow.size(1) * hrow.size(1);
            if (static_cast<int>(loop_ub < 3200)) {
              for (int i{0}; i < loop_ub; i++) {
                s[i] = 0.0;
              }
            } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

              for (int i = 0; i < loop_ub; i++) {
                s[i] = 0.0;
              }
            }
            for (loop_ub = 0; loop_ub < nv; loop_ub++) {
              s[loop_ub + s.size(0) * loop_ub] = hrow[loop_ub];
            }
            internal::maximum(s, hrow);
            if (s.size(1) == hrow.size(1)) {
              nv = varargin_2.size(1);
              b_s.set_size(s.size(0), s.size(1));
              loop_ub = s.size(1);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, b_loop_ub)

              for (int i = 0; i < loop_ub; i++) {
                b_loop_ub = s.size(0);
                for (i1 = 0; i1 < b_loop_ub; i1++) {
                  b_s[i1 + b_s.size(0) * i] =
                      (s[i1 + s.size(0) * i] > static_cast<double>(nv) *
                                                   hrow[i] *
                                                   2.2204460492503131E-16);
                }
              }
              b_combineVectorElements(b_s, r2);
            } else {
              binary_expand_op(r2, s, varargin_2, hrow);
            }
            c_x.set_size(1, r2.size(1));
            loop_ub = r2.size(1);
            if (static_cast<int>(r2.size(1) < 3200)) {
              for (int i{0}; i < loop_ub; i++) {
                c_x[i] = (r2[i] == 1);
              }
            } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

              for (int i = 0; i < loop_ub; i++) {
                c_x[i] = (r2[i] == 1);
              }
            }
            tooBig = (c_x.size(1) != 0);
            if (tooBig) {
              nv = 0;
              exitg1 = false;
              while ((!exitg1) && (nv <= c_x.size(1) - 1)) {
                if (!c_x[nv]) {
                  tooBig = false;
                  exitg1 = true;
                } else {
                  nv++;
                }
              }
            }
          } else {
            tooBig = false;
          }
        } else {
          tooBig = false;
        }
      } else {
        tooBig = false;
      }
      if (tooBig) {
        double connDimsT[2];
        double out_size_row[2];
        double padSizeT[2];
        double start[2];
        double nonzero_h_data;
        boolean_T conn;
        b_padImage(varargin_1, startT, a);
        svd(varargin_2, &a__1, hrow, b);
        nv = hrow.size(1);
        s.set_size(hrow.size(1), hrow.size(1));
        loop_ub = hrow.size(1) * hrow.size(1);
        if (static_cast<int>(loop_ub < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            s[i] = 0.0;
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            s[i] = 0.0;
          }
        }
        for (loop_ub = 0; loop_ub < nv; loop_ub++) {
          s[loop_ub + s.size(0) * loop_ub] = hrow[loop_ub];
        }
        nonzero_h_data = a__1 * std::sqrt(s[0]);
        a__1 = std::sqrt(s[0]);
        hrow.set_size(1, b.size(0));
        loop_ub = b.size(0);
        if (static_cast<int>(b.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            hrow[i] = b[i] * a__1;
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            hrow[i] = b[i] * a__1;
          }
        }
        s.set_size(a.size(0), a.size(1));
        loop_ub = a.size(0) * a.size(1);
        if (static_cast<int>(loop_ub < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            s[i] = a[i];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            s[i] = a[i];
          }
        }
        out_size_row[0] = s.size(0);
        out_size_row[1] = varargin_1.size(1);
        start[0] = 0.0;
        start[1] = startT[1];
        r.set_size(hrow.size(1));
        loop_ub = hrow.size(1);
        if (static_cast<int>(hrow.size(1) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            r[i] = (hrow[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            r[i] = (hrow[i] != 0.0);
          }
        }
        loop_ub = r.size(0) - 1;
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (r[b_i]) {
            nv++;
          }
        }
        r1.set_size(nv);
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (r[b_i]) {
            r1[nv] = b_i + 1;
            nv++;
          }
        }
        nonzero_h.set_size(r1.size(0));
        loop_ub = r1.size(0);
        if (static_cast<int>(r1.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            nonzero_h[i] = hrow[r1[i] - 1];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            nonzero_h[i] = hrow[r1[i] - 1];
          }
        }
        c_x.set_size(1, hrow.size(1));
        loop_ub = hrow.size(1);
        if (static_cast<int>(hrow.size(1) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            c_x[i] = (hrow[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            c_x[i] = (hrow[i] != 0.0);
          }
        }
        tooBig = true;
        if ((out_size_row[0] <= 65500.0) || (!(out_size_row[1] > 65500.0))) {
          tooBig = false;
        }
        if ((static_cast<double>(r1.size(0)) /
                 static_cast<double>(hrow.size(1)) >
             0.05) &&
            (!tooBig)) {
          tooBig = true;
        } else {
          tooBig = false;
        }
        b.set_size(static_cast<int>(out_size_row[0]),
                   static_cast<int>(out_size_row[1]));
        if (tooBig) {
          padSizeT[0] = s.size(0);
          startT[0] = 1.0;
          padSizeT[1] = s.size(1);
          startT[1] = hrow.size(1);
          ippfilter_real64(&s[0], &b[0], &out_size_row[0], 2.0, &padSizeT[0],
                           &hrow[0], &startT[0], true);
        } else {
          padSizeT[0] = s.size(0);
          connDimsT[0] = 1.0;
          padSizeT[1] = s.size(1);
          connDimsT[1] = c_x.size(1);
          imfilter_real64(&s[0], &b[0], 2.0, &out_size_row[0], 2.0,
                          &padSizeT[0], &(nonzero_h.data())[0],
                          static_cast<double>(r1.size(0)), &c_x[0], 2.0,
                          &connDimsT[0], &start[0], 2.0, true, true);
        }
        conn = (nonzero_h_data != 0.0);
        nv = 0;
        if (conn) {
          nv = 1;
        }
        tooBig = true;
        if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
          tooBig = false;
        }
        if ((nv > 0.05) && (!tooBig)) {
          tooBig = true;
        } else {
          tooBig = false;
        }
        s.set_size(b.size(0), b.size(1));
        loop_ub = b.size(0) * b.size(1);
        if (static_cast<int>(loop_ub < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            s[i] = b[i];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            s[i] = b[i];
          }
        }
        b.set_size(static_cast<int>(outSizeT[0]),
                   static_cast<int>(outSizeT[1]));
        if (tooBig) {
          padSizeT[0] = s.size(0);
          startT[0] = 1.0;
          padSizeT[1] = s.size(1);
          startT[1] = 1.0;
          ippfilter_real64(&s[0], &b[0], &outSizeT[0], 2.0, &padSizeT[0],
                           &nonzero_h_data, &startT[0], true);
        } else {
          padSizeT[0] = s.size(0);
          connDimsT[0] = 1.0;
          startT[0] = 0.0;
          padSizeT[1] = s.size(1);
          connDimsT[1] = 1.0;
          startT[1] = 0.0;
          imfilter_real64(&s[0], &b[0], 2.0, &outSizeT[0], 2.0, &padSizeT[0],
                          &nonzero_h_data, static_cast<double>(nv), &conn, 2.0,
                          &connDimsT[0], &startT[0], 2.0, true, true);
        }
        varargin_1.set_size(b.size(0), b.size(1));
        loop_ub = b.size(1);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, b_loop_ub)

        for (int i = 0; i < loop_ub; i++) {
          b_loop_ub = b.size(0);
          for (i1 = 0; i1 < b_loop_ub; i1++) {
            varargin_1[i1 + varargin_1.size(0) * i] =
                static_cast<float>(b[i1 + b.size(0) * i]);
          }
        }
      } else {
        b_padImage(varargin_1, startT, a);
        r.set_size(varargin_2.size(1));
        loop_ub = varargin_2.size(1);
        if (static_cast<int>(varargin_2.size(1) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            r[i] = (varargin_2[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            r[i] = (varargin_2[i] != 0.0);
          }
        }
        loop_ub = r.size(0) - 1;
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (r[b_i]) {
            nv++;
          }
        }
        r1.set_size(nv);
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (r[b_i]) {
            r1[nv] = b_i + 1;
            nv++;
          }
        }
        nonzero_h.set_size(r1.size(0));
        loop_ub = r1.size(0);
        if (static_cast<int>(r1.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            nonzero_h[i] = varargin_2[r1[i] - 1];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            nonzero_h[i] = varargin_2[r1[i] - 1];
          }
        }
        c_x.set_size(1, varargin_2.size(1));
        loop_ub = varargin_2.size(1);
        if (static_cast<int>(varargin_2.size(1) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            c_x[i] = (varargin_2[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            c_x[i] = (varargin_2[i] != 0.0);
          }
        }
        tooBig = true;
        if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
          tooBig = false;
        }
        if ((static_cast<double>(r1.size(0)) /
                 static_cast<double>(varargin_2.size(1)) >
             0.05) &&
            (!tooBig)) {
          tooBig = true;
        } else {
          tooBig = false;
        }
        varargin_1.set_size(static_cast<int>(outSizeT[0]),
                            static_cast<int>(outSizeT[1]));
        if (tooBig) {
          double padSizeT[2];
          padSizeT[0] = a.size(0);
          startT[0] = 1.0;
          padSizeT[1] = a.size(1);
          startT[1] = varargin_2.size(1);
          ippfilter_real32(&a[0], &varargin_1[0], &outSizeT[0], 2.0,
                           &padSizeT[0], &varargin_2[0], &startT[0], true);
        } else {
          double connDimsT[2];
          double padSizeT[2];
          padSizeT[0] = a.size(0);
          connDimsT[0] = 1.0;
          padSizeT[1] = a.size(1);
          connDimsT[1] = c_x.size(1);
          imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                          &padSizeT[0], &(nonzero_h.data())[0],
                          static_cast<double>(r1.size(0)), &c_x[0], 2.0,
                          &connDimsT[0], &startT[0], 2.0, true, true);
        }
      }
    }
  }
}

//
// Arguments    : ::coder::array<float, 2U> &varargin_1
//                const ::coder::array<double, 1U> &varargin_2
// Return Type  : void
//
void imfilter(::coder::array<float, 2U> &varargin_1,
              const ::coder::array<double, 1U> &varargin_2)
{
  array<double, 2U> b;
  array<double, 2U> b_s;
  array<double, 2U> r1;
  array<double, 1U> hcol;
  array<double, 1U> s;
  array<float, 2U> a;
  array<int, 2U> r2;
  array<int, 1U> r;
  array<boolean_T, 2U> c_s;
  array<boolean_T, 2U> c_x;
  array<boolean_T, 1U> b_x;
  array<boolean_T, 1U> connb;
  double outSizeT[2];
  double startT[2];
  double nonzero_h_data;
  int b_loop_ub;
  int i1;
  outSizeT[0] = varargin_1.size(0);
  startT[0] = static_cast<double>(varargin_2.size(0)) -
              std::floor((static_cast<double>(varargin_2.size(0)) + 1.0) / 2.0);
  outSizeT[1] = varargin_1.size(1);
  startT[1] = 0.0;
  if ((varargin_1.size(0) != 0) && (varargin_1.size(1) != 0)) {
    if (varargin_2.size(0) == 0) {
      double kernelSizeT[2];
      int b_kernelSizeT[2];
      int loop_ub;
      int nv;
      kernelSizeT[0] = varargin_1.size(0);
      kernelSizeT[1] = varargin_1.size(1);
      nv = static_cast<int>(kernelSizeT[0]);
      b_kernelSizeT[0] = nv;
      loop_ub = static_cast<int>(kernelSizeT[1]);
      varargin_1.set_size(nv, loop_ub);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, b_loop_ub)

      for (int i = 0; i < loop_ub; i++) {
        b_loop_ub = b_kernelSizeT[0];
        for (i1 = 0; i1 < b_loop_ub; i1++) {
          varargin_1[i1 + varargin_1.size(0) * i] = 0.0F;
        }
      }
    } else {
      int loop_ub;
      int nv;
      boolean_T tooBig;
      if (varargin_2.size(0) >= 289) {
        boolean_T x[2];
        boolean_T exitg1;
        x[0] = true;
        x[1] = false;
        tooBig = true;
        nv = 0;
        exitg1 = false;
        while ((!exitg1) && (nv <= 1)) {
          if (!x[nv]) {
            tooBig = false;
            exitg1 = true;
          } else {
            nv++;
          }
        }
        if (tooBig) {
          b_x.set_size(varargin_2.size(0));
          loop_ub = varargin_2.size(0);
          if (static_cast<int>(varargin_2.size(0) < 3200)) {
            for (int i{0}; i < loop_ub; i++) {
              b_x[i] = std::isinf(varargin_2[i]);
            }
          } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

            for (int i = 0; i < loop_ub; i++) {
              b_x[i] = std::isinf(varargin_2[i]);
            }
          }
          connb.set_size(varargin_2.size(0));
          loop_ub = varargin_2.size(0);
          if (static_cast<int>(varargin_2.size(0) < 3200)) {
            for (int i{0}; i < loop_ub; i++) {
              connb[i] = std::isnan(varargin_2[i]);
            }
          } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

            for (int i = 0; i < loop_ub; i++) {
              connb[i] = std::isnan(varargin_2[i]);
            }
          }
          loop_ub = b_x.size(0);
          if (static_cast<int>(b_x.size(0) < 3200)) {
            for (int i{0}; i < loop_ub; i++) {
              b_x[i] = ((!b_x[i]) && (!connb[i]));
            }
          } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

            for (int i = 0; i < loop_ub; i++) {
              b_x[i] = ((!b_x[i]) && (!connb[i]));
            }
          }
          tooBig = true;
          nv = 1;
          exitg1 = false;
          while ((!exitg1) && (nv <= b_x.size(0))) {
            if (!b_x[nv - 1]) {
              tooBig = false;
              exitg1 = true;
            } else {
              nv++;
            }
          }
          if (tooBig) {
            svd(varargin_2, b_s, s, &nonzero_h_data);
            nv = s.size(0);
            b_s.set_size(s.size(0), s.size(0));
            loop_ub = s.size(0) * s.size(0);
            if (static_cast<int>(loop_ub < 3200)) {
              for (int i{0}; i < loop_ub; i++) {
                b_s[i] = 0.0;
              }
            } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

              for (int i = 0; i < loop_ub; i++) {
                b_s[i] = 0.0;
              }
            }
            for (loop_ub = 0; loop_ub < nv; loop_ub++) {
              b_s[loop_ub + b_s.size(0) * loop_ub] = s[loop_ub];
            }
            internal::maximum(b_s, r1);
            if (b_s.size(1) == r1.size(1)) {
              nv = varargin_2.size(0);
              c_s.set_size(b_s.size(0), b_s.size(1));
              loop_ub = b_s.size(1);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, b_loop_ub)

              for (int i = 0; i < loop_ub; i++) {
                b_loop_ub = b_s.size(0);
                for (i1 = 0; i1 < b_loop_ub; i1++) {
                  c_s[i1 + c_s.size(0) * i] = (b_s[i1 + b_s.size(0) * i] >
                                               static_cast<double>(nv) * r1[i] *
                                                   2.2204460492503131E-16);
                }
              }
              b_combineVectorElements(c_s, r2);
            } else {
              binary_expand_op(r2, b_s, varargin_2, r1);
            }
            c_x.set_size(1, r2.size(1));
            loop_ub = r2.size(1);
            if (static_cast<int>(r2.size(1) < 3200)) {
              for (int i{0}; i < loop_ub; i++) {
                c_x[i] = (r2[i] == 1);
              }
            } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

              for (int i = 0; i < loop_ub; i++) {
                c_x[i] = (r2[i] == 1);
              }
            }
            tooBig = (c_x.size(1) != 0);
            if (tooBig) {
              nv = 0;
              exitg1 = false;
              while ((!exitg1) && (nv <= c_x.size(1) - 1)) {
                if (!c_x[nv]) {
                  tooBig = false;
                  exitg1 = true;
                } else {
                  nv++;
                }
              }
            }
          } else {
            tooBig = false;
          }
        } else {
          tooBig = false;
        }
      } else {
        tooBig = false;
      }
      if (tooBig) {
        double connDimsT[2];
        double kernelSizeT[2];
        double out_size_row[2];
        double padSizeT[2];
        double b_b;
        boolean_T conn;
        b_padImage(varargin_1, startT, a);
        svd(varargin_2, b, s, &nonzero_h_data);
        nv = s.size(0);
        b_s.set_size(s.size(0), s.size(0));
        loop_ub = s.size(0) * s.size(0);
        if (static_cast<int>(loop_ub < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            b_s[i] = 0.0;
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            b_s[i] = 0.0;
          }
        }
        for (loop_ub = 0; loop_ub < nv; loop_ub++) {
          b_s[loop_ub + b_s.size(0) * loop_ub] = s[loop_ub];
        }
        b_b = std::sqrt(b_s[0]);
        hcol.set_size(b.size(0));
        loop_ub = b.size(0);
        if (static_cast<int>(b.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            hcol[i] = b[i] * b_b;
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            hcol[i] = b[i] * b_b;
          }
        }
        nonzero_h_data *= std::sqrt(b_s[0]);
        b_s.set_size(a.size(0), a.size(1));
        loop_ub = a.size(0) * a.size(1);
        if (static_cast<int>(loop_ub < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            b_s[i] = a[i];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            b_s[i] = a[i];
          }
        }
        out_size_row[0] = b_s.size(0);
        out_size_row[1] = varargin_1.size(1);
        conn = (nonzero_h_data != 0.0);
        nv = 0;
        if (conn) {
          nv = 1;
        }
        tooBig = true;
        if ((b_s.size(0) <= 65500) || (!(out_size_row[1] > 65500.0))) {
          tooBig = false;
        }
        if ((nv > 0.05) && (!tooBig)) {
          tooBig = true;
        } else {
          tooBig = false;
        }
        b.set_size(b_s.size(0), static_cast<int>(out_size_row[1]));
        if (tooBig) {
          padSizeT[0] = b_s.size(0);
          kernelSizeT[0] = 1.0;
          padSizeT[1] = b_s.size(1);
          kernelSizeT[1] = 1.0;
          ippfilter_real64(&b_s[0], &b[0], &out_size_row[0], 2.0, &padSizeT[0],
                           &nonzero_h_data, &kernelSizeT[0], true);
        } else {
          padSizeT[0] = b_s.size(0);
          connDimsT[0] = 1.0;
          kernelSizeT[0] = 0.0;
          padSizeT[1] = b_s.size(1);
          connDimsT[1] = 1.0;
          kernelSizeT[1] = 0.0;
          imfilter_real64(&b_s[0], &b[0], 2.0, &out_size_row[0], 2.0,
                          &padSizeT[0], &nonzero_h_data,
                          static_cast<double>(nv), &conn, 2.0, &connDimsT[0],
                          &kernelSizeT[0], 2.0, true, true);
        }
        kernelSizeT[0] = startT[0];
        kernelSizeT[1] = 0.0;
        connb.set_size(hcol.size(0));
        loop_ub = hcol.size(0);
        if (static_cast<int>(hcol.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            connb[i] = (hcol[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            connb[i] = (hcol[i] != 0.0);
          }
        }
        loop_ub = connb.size(0) - 1;
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (connb[b_i]) {
            nv++;
          }
        }
        r.set_size(nv);
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (connb[b_i]) {
            r[nv] = b_i + 1;
            nv++;
          }
        }
        s.set_size(r.size(0));
        loop_ub = r.size(0);
        if (static_cast<int>(r.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            s[i] = hcol[r[i] - 1];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            s[i] = hcol[r[i] - 1];
          }
        }
        connb.set_size(hcol.size(0));
        loop_ub = hcol.size(0);
        if (static_cast<int>(hcol.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            connb[i] = (hcol[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            connb[i] = (hcol[i] != 0.0);
          }
        }
        tooBig = true;
        if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
          tooBig = false;
        }
        if ((static_cast<double>(r.size(0)) /
                 static_cast<double>(hcol.size(0)) >
             0.05) &&
            (!tooBig)) {
          tooBig = true;
        } else {
          tooBig = false;
        }
        b_s.set_size(b.size(0), b.size(1));
        loop_ub = b.size(0) * b.size(1);
        if (static_cast<int>(loop_ub < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            b_s[i] = b[i];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            b_s[i] = b[i];
          }
        }
        b.set_size(static_cast<int>(outSizeT[0]),
                   static_cast<int>(outSizeT[1]));
        if (tooBig) {
          padSizeT[0] = b_s.size(0);
          padSizeT[1] = b_s.size(1);
          kernelSizeT[0] = hcol.size(0);
          kernelSizeT[1] = 1.0;
          ippfilter_real64(&b_s[0], &b[0], &outSizeT[0], 2.0, &padSizeT[0],
                           &(hcol.data())[0], &kernelSizeT[0], true);
        } else {
          padSizeT[0] = b_s.size(0);
          padSizeT[1] = b_s.size(1);
          connDimsT[0] = connb.size(0);
          connDimsT[1] = 1.0;
          imfilter_real64(&b_s[0], &b[0], 2.0, &outSizeT[0], 2.0, &padSizeT[0],
                          &(s.data())[0], static_cast<double>(r.size(0)),
                          &(connb.data())[0], 2.0, &connDimsT[0],
                          &kernelSizeT[0], 2.0, true, true);
        }
        varargin_1.set_size(b.size(0), b.size(1));
        loop_ub = b.size(1);
#pragma omp parallel for num_threads(32 > omp_get_max_threads()                \
                                         ? omp_get_max_threads()               \
                                         : 32) private(i1, b_loop_ub)

        for (int i = 0; i < loop_ub; i++) {
          b_loop_ub = b.size(0);
          for (i1 = 0; i1 < b_loop_ub; i1++) {
            varargin_1[i1 + varargin_1.size(0) * i] =
                static_cast<float>(b[i1 + b.size(0) * i]);
          }
        }
      } else {
        b_padImage(varargin_1, startT, a);
        connb.set_size(varargin_2.size(0));
        loop_ub = varargin_2.size(0);
        if (static_cast<int>(varargin_2.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            connb[i] = (varargin_2[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            connb[i] = (varargin_2[i] != 0.0);
          }
        }
        loop_ub = connb.size(0) - 1;
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (connb[b_i]) {
            nv++;
          }
        }
        r.set_size(nv);
        nv = 0;
        for (int b_i{0}; b_i <= loop_ub; b_i++) {
          if (connb[b_i]) {
            r[nv] = b_i + 1;
            nv++;
          }
        }
        s.set_size(r.size(0));
        loop_ub = r.size(0);
        if (static_cast<int>(r.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            s[i] = varargin_2[r[i] - 1];
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            s[i] = varargin_2[r[i] - 1];
          }
        }
        connb.set_size(varargin_2.size(0));
        loop_ub = varargin_2.size(0);
        if (static_cast<int>(varargin_2.size(0) < 3200)) {
          for (int i{0}; i < loop_ub; i++) {
            connb[i] = (varargin_2[i] != 0.0);
          }
        } else {
#pragma omp parallel for num_threads(                                          \
    32 > omp_get_max_threads() ? omp_get_max_threads() : 32)

          for (int i = 0; i < loop_ub; i++) {
            connb[i] = (varargin_2[i] != 0.0);
          }
        }
        tooBig = true;
        if ((outSizeT[0] <= 65500.0) || (!(outSizeT[1] > 65500.0))) {
          tooBig = false;
        }
        if ((static_cast<double>(r.size(0)) /
                 static_cast<double>(varargin_2.size(0)) >
             0.05) &&
            (!tooBig)) {
          tooBig = true;
        } else {
          tooBig = false;
        }
        varargin_1.set_size(static_cast<int>(outSizeT[0]),
                            static_cast<int>(outSizeT[1]));
        if (tooBig) {
          double kernelSizeT[2];
          double padSizeT[2];
          padSizeT[0] = a.size(0);
          padSizeT[1] = a.size(1);
          kernelSizeT[0] = varargin_2.size(0);
          kernelSizeT[1] = 1.0;
          ippfilter_real32(
              &a[0], &varargin_1[0], &outSizeT[0], 2.0, &padSizeT[0],
              &(((::coder::array<double, 1U> *)&varargin_2)->data())[0],
              &kernelSizeT[0], true);
        } else {
          double connDimsT[2];
          double padSizeT[2];
          padSizeT[0] = a.size(0);
          padSizeT[1] = a.size(1);
          connDimsT[0] = connb.size(0);
          connDimsT[1] = 1.0;
          imfilter_real32(&a[0], &varargin_1[0], 2.0, &outSizeT[0], 2.0,
                          &padSizeT[0], &(s.data())[0],
                          static_cast<double>(r.size(0)), &(connb.data())[0],
                          2.0, &connDimsT[0], &startT[0], 2.0, true, true);
        }
      }
    }
  }
}

} // namespace coder

//
// File trailer for imfilter.cpp
//
// [EOF]
//
